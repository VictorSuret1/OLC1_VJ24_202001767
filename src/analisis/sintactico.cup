package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;


//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.Casteo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.IfElse;
import instrucciones.IfElseIf;
import instrucciones.Case;
import instrucciones.Match;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import excepciones.Errores;
import expresiones.OperadoresLogicos;
import expresiones.Logicos;
import expresiones.AccesoVar;



// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL,CARACTER, ID;
terminal FINCADENA, DOSP,PRINTLN, INT, DOUBLE, STRING,CHAR, BOOL,CONST,VAR,IF,ELSE, ELSEIF;
terminal PAR1, PAR2,LLAVE1,LLAVE2, MAS, MENOS, UMENOS, MULTIPLICACION, DIVISION,MODULO,POTENCIA,INCREMENTO, DECREMENTO;
terminal FLECHA, MATCH;
terminal IGUAL,EQUALS;
terminal NOTEQUALS;
terminal MENOR, MENORQUE;
terminal MAYOR, MAYORQUE;
terminal OR,AND,XOR,NOT;
terminal DEFAULT;
terminal TRUE, FALSE;


//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion EXPRESION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION,INCREMENTOYDECREMENTO;
nonterminal Tipo TIPOS;
nonterminal Instruccion SIF, SIF_ELSE, SIF_ELSEIF;
nonterminal Instruccion MATCH_SENTENCIA;
nonterminal LinkedList<Case> CASES_LIST;
nonterminal Case CASE;
nonterminal Case DEFAULT_CASE;

nonterminal String MUTABILIDAD;
nonterminal Instruccion CASTEO;
precedence left OR;
precedence left AND;
precedence left XOR;
precedence left NOT;
precedence left EQUALS,NOTEQUALS;
precedence left MENOR, MENORQUE, MAYOR, MAYORQUE;

precedence left MAS,MENOS;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence left POTENCIA;
precedence left UMENOS;


start with INICIO;

INICIO ::= INSTRUCCIONES:a      {: RESULT = a; :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION:a                 {: RESULT = a; :}
                | DECLARACION:a              {: RESULT = a; :}
                | ASIGNACION:a               {: RESULT = a; :}
                |INCREMENTOYDECREMENTO:a     {: RESULT = a; :}
                |SIF:a                      {: RESULT = a; :}
                |SIF_ELSE:a                  {: RESULT = a; :}
                |SIF_ELSEIF:a                {: RESULT = a; :}
                |MATCH_SENTENCIA:a        {: RESULT = a; :}
                | error FINCADENA
;

IMPRESION ::= PRINTLN PAR1 EXPRESION:a PAR2 FINCADENA      {: RESULT = new Print(a, aleft, aright); :}
;

DECLARACION ::= MUTABILIDAD:m ID:b DOSP TIPOS:a FINCADENA                   {: RESULT = new Declaracion(m, b, null, a, aleft, aright); :}
                | MUTABILIDAD:m ID:b DOSP TIPOS:a IGUAL EXPRESION:c FINCADENA {: RESULT = new Declaracion(m, b, c, a, aleft, aright); :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {: RESULT = new AsignacionVar(a, b, aleft, aright); :}
;

TIPOS ::= INT              {: RESULT = new Tipo(tipoDato.ENTERO); :}
           | DOUBLE          {: RESULT = new Tipo(tipoDato.DECIMAL); :}
           | STRING          {: RESULT = new Tipo(tipoDato.CADENA); :}
           | CHAR            {: RESULT = new Tipo(tipoDato.CARACTER); :}
           | BOOL            {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
;

MUTABILIDAD ::= CONST {: RESULT = "CONST"; :}
              | VAR   {: RESULT = "VAR"; :}
;

CASTEO ::= PAR1 TIPOS:a PAR2 EXPRESION:b {: RESULT = new Casteo(a, b, aleft, aright); :} %prec PAR1
;


INCREMENTOYDECREMENTO ::= ID:a INCREMENTO FINCADENA      {: RESULT = new Incremento(a, aleft, aright); :}
                         | ID:a DECREMENTO FINCADENA     {: RESULT = new Decremento(a, aleft, aright); :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2      {:      RESULT = new If(a,b,aleft,aright);      :}
;

SIF_ELSE ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2
             {: RESULT = new IfElse(a, b, c, aleft, aright); :}
;

SIF_ELSEIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSEIF PAR1 EXPRESION:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2
               {: RESULT = new IfElseIf(a, b, c, d, aleft, aright); :}
;


MATCH_SENTENCIA ::= MATCH PAR1 EXPRESION:a PAR2 LLAVE1 CASES_LIST:b LLAVE2                     {: RESULT = new Match(a, b, null, aleft, aright); :}
                   | MATCH PAR1 EXPRESION:a PAR2 LLAVE1 DEFAULT_CASE:c LLAVE2  
;


CASES_LIST ::= CASE:a                                {: RESULT = new LinkedList<>(); RESULT.add(a); :}
              | CASES_LIST:a CASE:b                  {: a.add(b); RESULT = a; :}
;

CASE ::= EXPRESION:a FLECHA LLAVE1 INSTRUCCIONES:b LLAVE2    {: RESULT = new Case(a, b, aleft, aright); :}
        |DEFAULT FLECHA LLAVE1 INSTRUCCIONES:a LLAVE2
;


EXPRESION ::=CASTEO:a               {: RESULT = a; :} 
            |MENOS EXPRESION:a               {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b     {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIVISION EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a MODULO EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a POTENCIA EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a EQUALS EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright); :} %prec EQUALS
            | EXPRESION:a NOTEQUALS EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright); :}
            | EXPRESION:a MAYOR EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); :}
            | EXPRESION:a MAYORQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); :}
            | EXPRESION:a MENOR EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); :}
            | EXPRESION:a MENORQUE EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :}
            | EXPRESION:a AND EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :}
            | EXPRESION:a XOR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :}
            | NOT EXPRESION:a {: RESULT = new Logicos(a, null, OperadoresLogicos.NOT, aleft, aright); :}
            | PAR1 EXPRESION:a PAR2 {: RESULT = a; :}
            | ENTERO:a      {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a     {: RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a      {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
            | CARACTER:a    {: RESULT = new Nativo(a.charAt(0), new Tipo(tipoDato.CARACTER), aleft, aright); :}
            | TRUE:a        {: RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
            | FALSE:a       {: RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
            | ID:a          {: RESULT = new AccesoVar(a, aleft, aright); :}
            
;