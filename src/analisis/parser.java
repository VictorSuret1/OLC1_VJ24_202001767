
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import java.util.ArrayList;
import java.util.HashMap;
import simbolo.Simbolo;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.Casteo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.IfElse;
import instrucciones.IfElseIf;
import instrucciones.Case;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Continue;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionVector2D;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Funcion;
import instrucciones.Return;
import instrucciones.AccesoVector2D;
import instrucciones.AsignacionVector;
import instrucciones.AsignacionVector2D;
import instrucciones.DeclaracionLista;
import instrucciones.Append;
import instrucciones.AsignacionLista;
import instrucciones.Remove;
import instrucciones.Llamada;
import instrucciones.DeclaracionStruct;
import instrucciones.InstanciacionStruct;
import instrucciones.AsignacionStruct;
import instrucciones.ToString;
import instrucciones.Length;
import instrucciones.Find;
import excepciones.tabla;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import excepciones.Errores;
import expresiones.OperadoresLogicos;
import expresiones.Logicos;
import expresiones.AccesoVar;
import expresiones.AccesoVector;
import expresiones.AccesoStruct;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\053\007\000\002\046\010" +
    "\000\002\055\010\000\002\055\005\000\002\047\013\000" +
    "\002\056\007\000\002\056\005\000\002\051\010\000\002" +
    "\006\007\000\002\037\012\000\002\037\011\000\002\036" +
    "\005\000\002\036\004\000\002\045\007\000\002\045\006" +
    "\000\002\041\015\000\002\042\011\000\002\043\011\000" +
    "\002\044\011\000\002\027\015\000\002\027\017\000\002" +
    "\030\005\000\002\030\003\000\002\031\007\000\002\031" +
    "\005\000\002\040\011\000\002\040\014\000\002\007\007" +
    "\000\002\007\011\000\002\010\006\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\025\003\000\002\025" +
    "\003\000\002\054\003\000\002\034\010\000\002\034\007" +
    "\000\002\032\012\000\002\032\011\000\002\033\006\000" +
    "\002\033\004\000\002\035\005\000\002\035\003\000\002" +
    "\026\006\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\013\011\000\002\013\015\000\002\013\020" +
    "\000\002\014\007\000\002\014\013\000\002\014\014\000" +
    "\002\015\003\000\002\015\004\000\002\016\007\000\002" +
    "\016\010\000\002\017\014\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\023\004\000\002\024\004" +
    "\000\002\021\011\000\002\022\013\000\002\005\003\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\006\000" +
    "\002\005\011\000\002\005\005\000\002\005\003\000\002" +
    "\005\006\000\002\005\006\000\002\005\010\000\002\005" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\062\003\043\010\037\013\022\014\020\015" +
    "\015\016\063\017\010\020\032\021\007\022\067\023\036" +
    "\044\027\063\045\064\025\065\054\066\072\067\016\073" +
    "\046\074\044\075\041\076\055\103\065\104\011\106\071" +
    "\001\002\000\004\010\u0164\001\002\000\066\002\uffe7\003" +
    "\uffe7\010\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\044\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\103\uffe7\104\uffe7\106\uffe7\001\002\000" +
    "\004\010\u0154\001\002\000\004\010\uffbf\001\002\000\020" +
    "\010\uffc2\011\uffc2\027\uffc2\031\uffc2\045\uffc2\052\uffc2\070" +
    "\uffc2\001\002\000\020\010\uffc0\011\uffc0\027\uffc0\031\uffc0" +
    "\045\uffc0\052\uffc0\070\uffc0\001\002\000\066\002\ufff4\003" +
    "\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\031\ufff4\044\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\076\ufff4\103\ufff4\104\ufff4\106\ufff4\001\002\000" +
    "\066\002\uffe9\003\uffe9\010\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\031" +
    "\uffe9\044\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\073\uffe9\074\uffe9\075\uffe9\076\uffe9\103\uffe9\104\uffe9\106" +
    "\uffe9\001\002\000\066\002\ufff1\003\ufff1\010\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\031\ufff1\044\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\103" +
    "\ufff1\104\ufff1\106\ufff1\001\002\000\020\010\uffc4\011\uffc4" +
    "\027\uffc4\031\uffc4\045\uffc4\052\uffc4\070\uffc4\001\002\000" +
    "\004\011\u0153\001\002\000\066\002\uffed\003\uffed\010\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\031\uffed\044\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\103\uffed\104\uffed\106\uffed\001\002\000\020\010\uffc5" +
    "\011\uffc5\027\uffc5\031\uffc5\045\uffc5\052\uffc5\070\uffc5\001" +
    "\002\000\066\002\ufffe\003\ufffe\010\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\031\ufffe\044\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe" +
    "\067\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\103\ufffe\104" +
    "\ufffe\106\ufffe\001\002\000\004\026\u014f\001\002\000\066" +
    "\002\ufff3\003\ufff3\010\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\031\ufff3" +
    "\044\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\103\ufff3\104\ufff3\106\ufff3" +
    "\001\002\000\066\002\uffec\003\uffec\010\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\031\uffec\044\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\073\uffec\074\uffec\075\uffec\076\uffec\103\uffec" +
    "\104\uffec\106\uffec\001\002\000\004\026\u013e\001\002\000" +
    "\064\002\000\003\043\010\037\013\022\014\020\015\015" +
    "\016\063\017\010\020\032\021\007\022\067\023\036\044" +
    "\027\063\045\064\025\065\054\066\072\067\016\073\046" +
    "\074\044\075\041\076\055\103\065\104\011\106\071\001" +
    "\002\000\032\004\101\005\107\006\103\007\117\010\113" +
    "\026\111\033\105\057\114\061\106\062\112\105\102\106" +
    "\104\001\002\000\066\002\uffee\003\uffee\010\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\031\uffee\044\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\073\uffee\074\uffee\075\uffee\076\uffee\103" +
    "\uffee\104\uffee\106\uffee\001\002\000\066\002\ufff6\003\ufff6" +
    "\010\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\031\ufff6\044\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\073\ufff6\074\ufff6\075" +
    "\ufff6\076\ufff6\103\ufff6\104\ufff6\106\ufff6\001\002\000\020" +
    "\010\uffc1\011\uffc1\027\uffc1\031\uffc1\045\uffc1\052\uffc1\070" +
    "\uffc1\001\002\000\004\010\367\001\002\000\066\002\uffeb" +
    "\003\uffeb\010\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\031\uffeb\044\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\103\uffeb\104\uffeb\106\uffeb\001\002" +
    "\000\066\002\ufffa\003\ufffa\010\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\031\ufffa\044\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\103\ufffa\104\ufffa" +
    "\106\ufffa\001\002\000\004\026\346\001\002\000\016\026" +
    "\163\041\310\042\305\045\307\070\304\101\306\001\002" +
    "\000\066\002\uffef\003\uffef\010\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\031\uffef\044\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\073\uffef\074\uffef\075\uffef\076\uffef\103\uffef\104\uffef" +
    "\106\uffef\001\002\000\034\004\101\005\107\006\103\007" +
    "\117\010\113\011\301\026\111\033\105\057\114\061\106" +
    "\062\112\105\102\106\104\001\002\000\066\002\ufff0\003" +
    "\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0\044\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\073\ufff0\074\ufff0" +
    "\075\ufff0\076\ufff0\103\ufff0\104\ufff0\106\ufff0\001\002\000" +
    "\004\011\300\001\002\000\004\010\271\001\002\000\004" +
    "\011\270\001\002\000\004\010\uffbd\001\002\000\066\002" +
    "\ufffb\003\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb\044" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\103\ufffb\104\ufffb\106\ufffb\001" +
    "\002\000\066\002\ufffc\003\ufffc\010\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\031\ufffc\044\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc" +
    "\067\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\103\ufffc\104" +
    "\ufffc\106\ufffc\001\002\000\066\002\uffe5\003\uffe5\010\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\031\uffe5\044\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\073\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\103\uffe5\104\uffe5\106\uffe5\001\002\000\066\002\ufff7" +
    "\003\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\031\ufff7\044\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\103\ufff7\104\ufff7\106\ufff7\001\002" +
    "\000\066\002\uffe8\003\uffe8\010\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\031\uffe8\044\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\103\uffe8\104\uffe8" +
    "\106\uffe8\001\002\000\004\026\262\001\002\000\004\050" +
    "\250\001\002\000\066\002\ufffd\003\ufffd\010\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\031\ufffd\044\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\103" +
    "\ufffd\104\ufffd\106\ufffd\001\002\000\066\002\ufff8\003\ufff8" +
    "\010\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\031\ufff8\044\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\103\ufff8\104\ufff8\106\ufff8\001\002\000\066" +
    "\002\ufff9\003\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\031\ufff9" +
    "\044\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\073" +
    "\ufff9\074\ufff9\075\ufff9\076\ufff9\103\ufff9\104\ufff9\106\ufff9" +
    "\001\002\000\066\002\ufff2\003\ufff2\010\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\031\ufff2\044\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\103\ufff2" +
    "\104\ufff2\106\ufff2\001\002\000\066\002\uffea\003\uffea\010" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\031\uffea\044\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\103\uffea\104\uffea\106\uffea\001\002\000\020\010" +
    "\uffc3\011\uffc3\027\uffc3\031\uffc3\045\uffc3\052\uffc3\070\uffc3" +
    "\001\002\000\004\002\247\001\002\000\004\030\232\001" +
    "\002\000\066\002\ufff5\003\ufff5\010\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\031\ufff5\044\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\103\ufff5\104" +
    "\ufff5\106\ufff5\001\002\000\004\010\uffbe\001\002\000\066" +
    "\002\uffe6\003\uffe6\010\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\031\uffe6" +
    "\044\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\103\uffe6\104\uffe6\106\uffe6" +
    "\001\002\000\004\026\226\001\002\000\004\030\073\001" +
    "\002\000\062\003\043\010\037\013\022\014\020\015\015" +
    "\016\063\017\010\020\032\021\007\022\067\023\036\044" +
    "\027\063\045\064\025\065\054\066\072\067\016\073\046" +
    "\074\044\075\041\076\055\103\065\104\011\106\071\001" +
    "\002\000\064\003\043\010\037\013\022\014\020\015\015" +
    "\016\063\017\010\020\032\021\007\022\067\023\036\031" +
    "\075\044\027\063\045\064\025\065\054\066\072\067\016" +
    "\073\046\074\044\075\041\076\055\103\065\104\011\106" +
    "\071\001\002\000\004\065\077\001\002\000\066\002\uffff" +
    "\003\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\031\uffff\044\uffff" +
    "\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\073\uffff\074" +
    "\uffff\075\uffff\076\uffff\103\uffff\104\uffff\106\uffff\001\002" +
    "\000\004\026\100\001\002\000\032\004\101\005\107\006" +
    "\103\007\117\010\113\026\111\033\105\057\114\061\106" +
    "\062\112\105\102\106\104\001\002\000\142\002\uff89\003" +
    "\uff89\010\uff89\011\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\027\uff89\030" +
    "\uff89\031\uff89\032\uff89\033\uff89\035\uff89\036\uff89\037\uff89" +
    "\040\uff89\043\uff89\044\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\060\uff89" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\071\uff89\072" +
    "\uff89\073\uff89\074\uff89\075\uff89\076\uff89\103\uff89\104\uff89" +
    "\106\uff89\001\002\000\004\026\223\001\002\000\142\002" +
    "\uff8a\003\uff8a\010\uff8a\011\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\035\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\043\uff8a\044\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\060\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\103\uff8a" +
    "\104\uff8a\106\uff8a\001\002\000\004\026\220\001\002\000" +
    "\032\004\101\005\107\006\103\007\117\010\113\026\111" +
    "\033\105\057\114\061\106\062\112\105\102\106\104\001" +
    "\002\000\142\002\uff87\003\uff87\010\uff87\011\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\043\uff87\044\uff87\046" +
    "\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87" +
    "\055\uff87\056\uff87\060\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87" +
    "\076\uff87\103\uff87\104\uff87\106\uff87\001\002\000\142\002" +
    "\uff8b\003\uff8b\010\uff8b\011\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\043\uff8b\044\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\060\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\103\uff8b" +
    "\104\uff8b\106\uff8b\001\002\000\142\002\uff81\003\uff81\010" +
    "\uff81\011\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\043\uff81\044\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\uff81\060\uff81\063\uff81" +
    "\064\uff81\065\uff81\066\uff81\067\uff81\071\uff81\072\uff81\073" +
    "\uff81\074\uff81\075\uff81\076\uff81\103\uff81\104\uff81\106\uff81" +
    "\001\002\000\046\004\101\005\107\006\103\007\117\010" +
    "\113\014\020\015\015\016\063\017\010\020\032\026\111" +
    "\033\105\057\114\061\106\062\112\104\011\105\102\106" +
    "\104\001\002\000\142\002\uff86\003\uff86\010\uff86\011\uff86" +
    "\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021" +
    "\uff86\022\uff86\023\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\035\uff86\036\uff86\037\uff86\040\uff86\043\uff86\044" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\060\uff86\063\uff86\064\uff86\065" +
    "\uff86\066\uff86\067\uff86\071\uff86\072\uff86\073\uff86\074\uff86" +
    "\075\uff86\076\uff86\103\uff86\104\uff86\106\uff86\001\002\000" +
    "\150\002\uff85\003\uff85\010\uff85\011\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023" +
    "\uff85\026\163\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\043\uff85\044\uff85\046" +
    "\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85" +
    "\055\uff85\056\uff85\060\uff85\063\uff85\064\uff85\065\uff85\066" +
    "\uff85\067\uff85\070\161\071\uff85\072\uff85\073\uff85\074\uff85" +
    "\075\uff85\076\uff85\101\162\103\uff85\104\uff85\106\uff85\001" +
    "\002\000\032\004\101\005\107\006\103\007\117\010\113" +
    "\026\111\033\105\057\114\061\106\062\112\105\102\106" +
    "\104\001\002\000\142\002\uff9e\003\uff9e\010\uff9e\011\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\043\uff9e\044" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\060\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\075\uff9e\076\uff9e\103\uff9e\104\uff9e\106\uff9e\001\002\000" +
    "\042\027\132\032\131\033\122\035\127\036\135\037\134" +
    "\040\123\046\136\047\125\050\124\051\126\052\133\053" +
    "\130\054\137\055\120\056\121\001\002\000\142\002\uff88" +
    "\003\uff88\010\uff88\011\uff88\013\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\043\uff88\044\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\060" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\071\uff88" +
    "\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\103\uff88\104" +
    "\uff88\106\uff88\001\002\000\032\004\101\005\107\006\103" +
    "\007\117\010\113\026\111\033\105\057\114\061\106\062" +
    "\112\105\102\106\104\001\002\000\032\004\101\005\107" +
    "\006\103\007\117\010\113\026\111\033\105\057\114\061" +
    "\106\062\112\105\102\106\104\001\002\000\032\004\101" +
    "\005\107\006\103\007\117\010\113\026\111\033\105\057" +
    "\114\061\106\062\112\105\102\106\104\001\002\000\032" +
    "\004\101\005\107\006\103\007\117\010\113\026\111\033" +
    "\105\057\114\061\106\062\112\105\102\106\104\001\002" +
    "\000\032\004\101\005\107\006\103\007\117\010\113\026" +
    "\111\033\105\057\114\061\106\062\112\105\102\106\104" +
    "\001\002\000\032\004\101\005\107\006\103\007\117\010" +
    "\113\026\111\033\105\057\114\061\106\062\112\105\102" +
    "\106\104\001\002\000\032\004\101\005\107\006\103\007" +
    "\117\010\113\026\111\033\105\057\114\061\106\062\112" +
    "\105\102\106\104\001\002\000\032\004\101\005\107\006" +
    "\103\007\117\010\113\026\111\033\105\057\114\061\106" +
    "\062\112\105\102\106\104\001\002\000\032\004\101\005" +
    "\107\006\103\007\117\010\113\026\111\033\105\057\114" +
    "\061\106\062\112\105\102\106\104\001\002\000\032\004" +
    "\101\005\107\006\103\007\117\010\113\026\111\033\105" +
    "\057\114\061\106\062\112\105\102\106\104\001\002\000" +
    "\004\011\145\001\002\000\032\004\101\005\107\006\103" +
    "\007\117\010\113\026\111\033\105\057\114\061\106\062" +
    "\112\105\102\106\104\001\002\000\032\004\101\005\107" +
    "\006\103\007\117\010\113\026\111\033\105\057\114\061" +
    "\106\062\112\105\102\106\104\001\002\000\032\004\101" +
    "\005\107\006\103\007\117\010\113\026\111\033\105\057" +
    "\114\061\106\062\112\105\102\106\104\001\002\000\032" +
    "\004\101\005\107\006\103\007\117\010\113\026\111\033" +
    "\105\057\114\061\106\062\112\105\102\106\104\001\002" +
    "\000\032\004\101\005\107\006\103\007\117\010\113\026" +
    "\111\033\105\057\114\061\106\062\112\105\102\106\104" +
    "\001\002\000\142\002\uff90\003\uff90\010\uff90\011\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\027\uff90\030\uff90\031\uff90\032\131\033" +
    "\122\035\127\036\135\037\134\040\123\043\uff90\044\uff90" +
    "\046\136\047\125\050\124\051\126\052\133\053\130\054" +
    "\uff90\055\120\056\121\060\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\067\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\076\uff90\103\uff90\104\uff90\106\uff90\001\002\000\142" +
    "\002\uff96\003\uff96\010\uff96\011\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\131\033\122\035\127\036" +
    "\135\037\134\040\123\043\uff96\044\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\060\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\103" +
    "\uff96\104\uff96\106\uff96\001\002\000\142\002\uff99\003\uff99" +
    "\010\uff99\011\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\123\043\uff99\044\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\060\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\103\uff99\104\uff99\106" +
    "\uff99\001\002\000\142\002\uff98\003\uff98\010\uff98\011\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\035\uff98\036\uff98\037\uff98\040\123\043\uff98\044" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\060\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\071\uff98\072\uff98\073\uff98\074\uff98" +
    "\075\uff98\076\uff98\103\uff98\104\uff98\106\uff98\001\002\000" +
    "\142\002\uff94\003\uff94\010\uff94\011\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\043\uff94\044\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\060\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94" +
    "\103\uff94\104\uff94\106\uff94\001\002\000\066\002\uff9f\003" +
    "\uff9f\010\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\031\uff9f\044\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\103\uff9f\104\uff9f\106\uff9f\001\002\000" +
    "\142\002\uff9c\003\uff9c\010\uff9c\011\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\035\127" +
    "\036\135\037\134\040\123\043\uff9c\044\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\060\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c" +
    "\103\uff9c\104\uff9c\106\uff9c\001\002\000\142\002\uff93\003" +
    "\uff93\010\uff93\011\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\131\033\122\035\127\036\135\037\134" +
    "\040\123\043\uff93\044\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\060\uff93" +
    "\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\103\uff93\104\uff93" +
    "\106\uff93\001\002\000\142\002\uff9a\003\uff9a\010\uff9a\011" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\035\uff9a\036\uff9a\037\uff9a\040\123\043\uff9a" +
    "\044\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\060\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\071\uff9a\072\uff9a\073\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\103\uff9a\104\uff9a\106\uff9a\001\002" +
    "\000\142\002\uff91\003\uff91\010\uff91\011\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\027\uff91\030\uff91\031\uff91\032\131\033\122\035" +
    "\127\036\135\037\134\040\123\043\uff91\044\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\060\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\067\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076" +
    "\uff91\103\uff91\104\uff91\106\uff91\001\002\000\142\002\uff95" +
    "\003\uff95\010\uff95\011\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\131\033\122\035\127\036\135\037" +
    "\134\040\123\043\uff95\044\uff95\046\uff95\047\uff95\050\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\060" +
    "\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\071\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\103\uff95\104" +
    "\uff95\106\uff95\001\002\000\142\002\uff92\003\uff92\010\uff92" +
    "\011\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\131\033\122\035\127\036\135\037\134\040\123\043" +
    "\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\056\uff92\060\uff92\063\uff92\064" +
    "\uff92\065\uff92\066\uff92\067\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\103\uff92\104\uff92\106\uff92\001" +
    "\002\000\140\002\uff97\003\uff97\010\uff97\011\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\023\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\035\uff97\036\uff97\037\uff97\043\uff97\044\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\060\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97" +
    "\103\uff97\104\uff97\106\uff97\001\002\000\142\002\uff9b\003" +
    "\uff9b\010\uff9b\011\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\035\127\036\135\037\134" +
    "\040\123\043\uff9b\044\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\103\uff9b\104\uff9b" +
    "\106\uff9b\001\002\000\142\002\uff8e\003\uff8e\010\uff8e\011" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\022\uff8e\023\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\131\033\122\035\127\036\135\037\134\040\123\043\uff8e" +
    "\044\uff8e\046\136\047\125\050\124\051\126\052\133\053" +
    "\130\054\uff8e\055\uff8e\056\uff8e\060\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\067\uff8e\071\uff8e\072\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\103\uff8e\104\uff8e\106\uff8e\001\002" +
    "\000\142\002\uff8f\003\uff8f\010\uff8f\011\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\027\uff8f\030\uff8f\031\uff8f\032\131\033\122\035" +
    "\127\036\135\037\134\040\123\043\uff8f\044\uff8f\046\136" +
    "\047\125\050\124\051\126\052\133\053\130\054\uff8f\055" +
    "\uff8f\056\121\060\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\067\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076" +
    "\uff8f\103\uff8f\104\uff8f\106\uff8f\001\002\000\142\002\uff8d" +
    "\003\uff8d\010\uff8d\011\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\131\033\122\035\127\036\135\037" +
    "\134\040\123\043\uff8d\044\uff8d\046\136\047\125\050\124" +
    "\051\126\052\133\053\130\054\uff8d\055\uff8d\056\uff8d\060" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\071\uff8d" +
    "\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\103\uff8d\104" +
    "\uff8d\106\uff8d\001\002\000\032\004\101\005\107\006\103" +
    "\007\117\010\113\026\111\033\105\057\114\061\106\062" +
    "\112\105\102\106\104\001\002\000\010\010\174\102\176" +
    "\107\175\001\002\000\034\004\101\005\107\006\103\007" +
    "\117\010\113\026\111\027\164\033\105\057\114\061\106" +
    "\062\112\105\102\106\104\001\002\000\004\011\173\001" +
    "\002\000\006\027\170\072\167\001\002\000\044\027\uffb5" +
    "\032\131\033\122\035\127\036\135\037\134\040\123\046" +
    "\136\047\125\050\124\051\126\052\133\053\130\054\137" +
    "\055\120\056\121\072\uffb5\001\002\000\032\004\101\005" +
    "\107\006\103\007\117\010\113\026\111\033\105\057\114" +
    "\061\106\062\112\105\102\106\104\001\002\000\004\011" +
    "\171\001\002\000\142\002\uffd6\003\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\043\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\060\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\076\uffd6\103\uffd6\104\uffd6\106\uffd6\001\002\000" +
    "\044\027\uffb6\032\131\033\122\035\127\036\135\037\134" +
    "\040\123\046\136\047\125\050\124\051\126\052\133\053" +
    "\130\054\137\055\120\056\121\072\uffb6\001\002\000\142" +
    "\002\uffd5\003\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\060\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\103" +
    "\uffd5\104\uffd5\106\uffd5\001\002\000\142\002\uff82\003\uff82" +
    "\010\uff82\011\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\027\uff82\030\uff82" +
    "\031\uff82\032\uff82\033\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\043\uff82\044\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\060\uff82\063" +
    "\uff82\064\uff82\065\uff82\066\uff82\067\uff82\071\uff82\072\uff82" +
    "\073\uff82\074\uff82\075\uff82\076\uff82\103\uff82\104\uff82\106" +
    "\uff82\001\002\000\004\026\202\001\002\000\004\026\177" +
    "\001\002\000\032\004\101\005\107\006\103\007\117\010" +
    "\113\026\111\033\105\057\114\061\106\062\112\105\102" +
    "\106\104\001\002\000\042\027\201\032\131\033\122\035" +
    "\127\036\135\037\134\040\123\046\136\047\125\050\124" +
    "\051\126\052\133\053\130\054\137\055\120\056\121\001" +
    "\002\000\142\002\uff7e\003\uff7e\010\uff7e\011\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e" +
    "\035\uff7e\036\uff7e\037\uff7e\040\uff7e\043\uff7e\044\uff7e\046" +
    "\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e" +
    "\055\uff7e\056\uff7e\060\uff7e\063\uff7e\064\uff7e\065\uff7e\066" +
    "\uff7e\067\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\076\uff7e\103\uff7e\104\uff7e\106\uff7e\001\002\000\032\004" +
    "\101\005\107\006\103\007\117\010\113\026\111\033\105" +
    "\057\114\061\106\062\112\105\102\106\104\001\002\000" +
    "\042\027\204\032\131\033\122\035\127\036\135\037\134" +
    "\040\123\046\136\047\125\050\124\051\126\052\133\053" +
    "\130\054\137\055\120\056\121\001\002\000\142\002\uff7d" +
    "\003\uff7d\010\uff7d\011\uff7d\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\027\uff7d" +
    "\030\uff7d\031\uff7d\032\uff7d\033\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\043\uff7d\044\uff7d\046\uff7d\047\uff7d\050\uff7d" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\060" +
    "\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\071\uff7d" +
    "\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\103\uff7d\104" +
    "\uff7d\106\uff7d\001\002\000\042\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\046\136\047\125\050\124\051" +
    "\126\052\133\053\130\054\137\055\120\056\121\071\206" +
    "\001\002\000\144\002\uff84\003\uff84\010\uff84\011\uff84\013" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84" +
    "\022\uff84\023\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\043\uff84\044\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\060\uff84\063\uff84\064\uff84\065\uff84" +
    "\066\uff84\067\uff84\070\207\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\075\uff84\076\uff84\103\uff84\104\uff84\106\uff84\001\002" +
    "\000\032\004\101\005\107\006\103\007\117\010\113\026" +
    "\111\033\105\057\114\061\106\062\112\105\102\106\104" +
    "\001\002\000\042\032\131\033\122\035\127\036\135\037" +
    "\134\040\123\046\136\047\125\050\124\051\126\052\133" +
    "\053\130\054\137\055\120\056\121\071\211\001\002\000" +
    "\142\002\uff83\003\uff83\010\uff83\011\uff83\013\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\043\uff83\044\uff83\046\uff83\047" +
    "\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83" +
    "\056\uff83\060\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067" +
    "\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83" +
    "\103\uff83\104\uff83\106\uff83\001\002\000\004\027\215\001" +
    "\002\000\042\027\214\032\131\033\122\035\127\036\135" +
    "\037\134\040\123\046\136\047\125\050\124\051\126\052" +
    "\133\053\130\054\137\055\120\056\121\001\002\000\142" +
    "\002\uff8c\003\uff8c\010\uff8c\011\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\043\uff8c\044\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056" +
    "\uff8c\060\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c" +
    "\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\103" +
    "\uff8c\104\uff8c\106\uff8c\001\002\000\032\004\101\005\107" +
    "\006\103\007\117\010\113\026\111\033\105\057\114\061" +
    "\106\062\112\105\102\106\104\001\002\000\142\002\uffb4" +
    "\003\uffb4\010\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\131\033\122\035\127\036\135\037" +
    "\134\040\123\043\uffb4\044\uffb4\046\136\047\125\050\124" +
    "\051\126\052\133\053\130\054\137\055\120\056\121\060" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\071\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\103\uffb4\104" +
    "\uffb4\106\uffb4\001\002\000\142\002\uff9d\003\uff9d\010\uff9d" +
    "\011\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\043" +
    "\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\067\uff9d\071\uff9d\072\uff9d\073\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\103\uff9d\104\uff9d\106\uff9d\001" +
    "\002\000\032\004\101\005\107\006\103\007\117\010\113" +
    "\026\111\033\105\057\114\061\106\062\112\105\102\106" +
    "\104\001\002\000\042\027\222\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\046\136\047\125\050\124\051" +
    "\126\052\133\053\130\054\137\055\120\056\121\001\002" +
    "\000\142\002\uff7f\003\uff7f\010\uff7f\011\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\043\uff7f\044\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055" +
    "\uff7f\056\uff7f\060\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076" +
    "\uff7f\103\uff7f\104\uff7f\106\uff7f\001\002\000\032\004\101" +
    "\005\107\006\103\007\117\010\113\026\111\033\105\057" +
    "\114\061\106\062\112\105\102\106\104\001\002\000\042" +
    "\027\225\032\131\033\122\035\127\036\135\037\134\040" +
    "\123\046\136\047\125\050\124\051\126\052\133\053\130" +
    "\054\137\055\120\056\121\001\002\000\142\002\uff80\003" +
    "\uff80\010\uff80\011\uff80\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\043\uff80\044\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\060\uff80" +
    "\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\075\uff80\076\uff80\103\uff80\104\uff80" +
    "\106\uff80\001\002\000\032\004\101\005\107\006\103\007" +
    "\117\010\113\026\111\033\105\057\114\061\106\062\112" +
    "\105\102\106\104\001\002\000\042\027\230\032\131\033" +
    "\122\035\127\036\135\037\134\040\123\046\136\047\125" +
    "\050\124\051\126\052\133\053\130\054\137\055\120\056" +
    "\121\001\002\000\004\011\231\001\002\000\066\002\uffe3" +
    "\003\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\031\uffe3\044\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\103\uffe3\104\uffe3\106\uffe3\001\002" +
    "\000\004\010\233\001\002\000\004\012\245\001\002\000" +
    "\006\011\235\031\236\001\002\000\004\010\241\001\002" +
    "\000\004\010\237\001\002\000\004\011\240\001\002\000" +
    "\066\002\uffe2\003\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\031" +
    "\uffe2\044\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\103\uffe2\104\uffe2\106" +
    "\uffe2\001\002\000\004\012\242\001\002\000\016\014\020" +
    "\015\015\016\063\017\010\020\032\104\011\001\002\000" +
    "\004\011\244\001\002\000\006\011\uffe1\031\uffe1\001\002" +
    "\000\016\014\020\015\015\016\063\017\010\020\032\104" +
    "\011\001\002\000\006\011\uffe0\031\uffe0\001\002\000\004" +
    "\002\001\001\002\000\016\014\020\015\015\016\063\017" +
    "\010\020\032\104\011\001\002\000\004\052\252\001\002" +
    "\000\004\010\253\001\002\000\004\045\254\001\002\000" +
    "\004\077\255\001\002\000\004\076\256\001\002\000\004" +
    "\026\257\001\002\000\004\027\260\001\002\000\004\011" +
    "\261\001\002\000\066\002\uffd4\003\uffd4\010\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\031\uffd4\044\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\103" +
    "\uffd4\104\uffd4\106\uffd4\001\002\000\032\004\101\005\107" +
    "\006\103\007\117\010\113\026\111\033\105\057\114\061" +
    "\106\062\112\105\102\106\104\001\002\000\042\027\264" +
    "\032\131\033\122\035\127\036\135\037\134\040\123\046" +
    "\136\047\125\050\124\051\126\052\133\053\130\054\137" +
    "\055\120\056\121\001\002\000\004\030\265\001\002\000" +
    "\062\003\043\010\037\013\022\014\020\015\015\016\063" +
    "\017\010\020\032\021\007\022\067\023\036\044\027\063" +
    "\045\064\025\065\054\066\072\067\016\073\046\074\044" +
    "\075\041\076\055\103\065\104\011\106\071\001\002\000" +
    "\064\003\043\010\037\013\022\014\020\015\015\016\063" +
    "\017\010\020\032\021\007\022\067\023\036\031\267\044" +
    "\027\063\045\064\025\065\054\066\072\067\016\073\046" +
    "\074\044\075\041\076\055\103\065\104\011\106\071\001" +
    "\002\000\066\002\uffa0\003\uffa0\010\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\031\uffa0\044\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\067\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\103\uffa0\104" +
    "\uffa0\106\uffa0\001\002\000\066\002\uffa2\003\uffa2\010\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\031\uffa2\044\uffa2\063\uffa2\064\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\073\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\103\uffa2\104\uffa2\106\uffa2\001\002\000\004\026\272" +
    "\001\002\000\034\004\101\005\107\006\103\007\117\010" +
    "\113\026\111\027\273\033\105\057\114\061\106\062\112" +
    "\105\102\106\104\001\002\000\004\011\277\001\002\000" +
    "\006\027\275\072\167\001\002\000\004\011\276\001\002" +
    "\000\066\002\uffbc\003\uffbc\010\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\031\uffbc\044\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\103\uffbc\104\uffbc" +
    "\106\uffbc\001\002\000\066\002\uffbb\003\uffbb\010\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\031\uffbb\044\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\067\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\103\uffbb\104\uffbb\106\uffbb\001\002\000\066\002\uffe4\003" +
    "\uffe4\010\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\031\uffe4\044\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\103\uffe4\104\uffe4\106\uffe4\001\002\000" +
    "\066\002\uffd7\003\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\031" +
    "\uffd7\044\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\073\uffd7\074\uffd7\075\uffd7\076\uffd7\103\uffd7\104\uffd7\106" +
    "\uffd7\001\002\000\042\011\303\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\046\136\047\125\050\124\051" +
    "\126\052\133\053\130\054\137\055\120\056\121\001\002" +
    "\000\066\002\uffd8\003\uffd8\010\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\031\uffd8\044\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\103\uffd8\104\uffd8" +
    "\106\uffd8\001\002\000\032\004\101\005\107\006\103\007" +
    "\117\010\113\026\111\033\105\057\114\061\106\062\112" +
    "\105\102\106\104\001\002\000\004\011\332\001\002\000" +
    "\010\010\314\100\315\102\316\001\002\000\032\004\101" +
    "\005\107\006\103\007\117\010\113\026\111\033\105\057" +
    "\114\061\106\062\112\105\102\106\104\001\002\000\004" +
    "\011\311\001\002\000\066\002\uffb3\003\uffb3\010\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\031\uffb3\044\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\103\uffb3\104\uffb3\106\uffb3\001\002\000\126\002\uffb1\003" +
    "\uffb1\010\uffb1\011\313\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\031\uffb1\032" +
    "\131\033\122\035\127\036\135\037\134\040\123\044\uffb1" +
    "\046\136\047\125\050\124\051\126\052\133\053\130\054" +
    "\137\055\120\056\121\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\103\uffb1\104" +
    "\uffb1\106\uffb1\001\002\000\112\002\uffc6\003\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\026\uffc6\031\uffc6\033\uffc6\044\uffc6\057\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\103\uffc6\104\uffc6\105\uffc6\106" +
    "\uffc6\001\002\000\004\045\327\001\002\000\004\026\323" +
    "\001\002\000\004\026\317\001\002\000\032\004\101\005" +
    "\107\006\103\007\117\010\113\026\111\033\105\057\114" +
    "\061\106\062\112\105\102\106\104\001\002\000\042\027" +
    "\321\032\131\033\122\035\127\036\135\037\134\040\123" +
    "\046\136\047\125\050\124\051\126\052\133\053\130\054" +
    "\137\055\120\056\121\001\002\000\004\011\322\001\002" +
    "\000\066\002\uffd1\003\uffd1\010\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\031\uffd1\044\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\103\uffd1\104\uffd1" +
    "\106\uffd1\001\002\000\032\004\101\005\107\006\103\007" +
    "\117\010\113\026\111\033\105\057\114\061\106\062\112" +
    "\105\102\106\104\001\002\000\042\027\325\032\131\033" +
    "\122\035\127\036\135\037\134\040\123\046\136\047\125" +
    "\050\124\051\126\052\133\053\130\054\137\055\120\056" +
    "\121\001\002\000\004\011\326\001\002\000\066\002\uffd3" +
    "\003\uffd3\010\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\031\uffd3\044\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\103\uffd3\104\uffd3\106\uffd3\001\002" +
    "\000\032\004\101\005\107\006\103\007\117\010\113\026" +
    "\111\033\105\057\114\061\106\062\112\105\102\106\104" +
    "\001\002\000\042\011\331\032\131\033\122\035\127\036" +
    "\135\037\134\040\123\046\136\047\125\050\124\051\126" +
    "\052\133\053\130\054\137\055\120\056\121\001\002\000" +
    "\066\002\uffdc\003\uffdc\010\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\031" +
    "\uffdc\044\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\103\uffdc\104\uffdc\106" +
    "\uffdc\001\002\000\066\002\uffb2\003\uffb2\010\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\031\uffb2\044\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\103" +
    "\uffb2\104\uffb2\106\uffb2\001\002\000\042\032\131\033\122" +
    "\035\127\036\135\037\134\040\123\046\136\047\125\050" +
    "\124\051\126\052\133\053\130\054\137\055\120\056\121" +
    "\071\334\001\002\000\006\045\336\070\335\001\002\000" +
    "\032\004\101\005\107\006\103\007\117\010\113\026\111" +
    "\033\105\057\114\061\106\062\112\105\102\106\104\001" +
    "\002\000\032\004\101\005\107\006\103\007\117\010\113" +
    "\026\111\033\105\057\114\061\106\062\112\105\102\106" +
    "\104\001\002\000\042\011\340\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\046\136\047\125\050\124\051" +
    "\126\052\133\053\130\054\137\055\120\056\121\001\002" +
    "\000\066\002\uffca\003\uffca\010\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\031\uffca\044\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\103\uffca\104\uffca" +
    "\106\uffca\001\002\000\042\032\131\033\122\035\127\036" +
    "\135\037\134\040\123\046\136\047\125\050\124\051\126" +
    "\052\133\053\130\054\137\055\120\056\121\071\342\001" +
    "\002\000\004\045\343\001\002\000\032\004\101\005\107" +
    "\006\103\007\117\010\113\026\111\033\105\057\114\061" +
    "\106\062\112\105\102\106\104\001\002\000\042\011\345" +
    "\032\131\033\122\035\127\036\135\037\134\040\123\046" +
    "\136\047\125\050\124\051\126\052\133\053\130\054\137" +
    "\055\120\056\121\001\002\000\066\002\uffc9\003\uffc9\010" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\031\uffc9\044\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\073\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\103\uffc9\104\uffc9\106\uffc9\001\002\000\032\004" +
    "\101\005\107\006\103\007\117\010\113\026\111\033\105" +
    "\057\114\061\106\062\112\105\102\106\104\001\002\000" +
    "\042\027\350\032\131\033\122\035\127\036\135\037\134" +
    "\040\123\046\136\047\125\050\124\051\126\052\133\053" +
    "\130\054\137\055\120\056\121\001\002\000\004\030\351" +
    "\001\002\000\062\003\043\010\037\013\022\014\020\015" +
    "\015\016\063\017\010\020\032\021\007\022\067\023\036" +
    "\044\027\063\045\064\025\065\054\066\072\067\016\073" +
    "\046\074\044\075\041\076\055\103\065\104\011\106\071" +
    "\001\002\000\064\003\043\010\037\013\022\014\020\015" +
    "\015\016\063\017\010\020\032\021\007\022\067\023\036" +
    "\031\353\044\027\063\045\064\025\065\054\066\072\067" +
    "\016\073\046\074\044\075\041\076\055\103\065\104\011" +
    "\106\071\001\002\000\072\002\uffb0\003\uffb0\010\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\354\025\355\031\uffb0\044\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\103\uffb0\104\uffb0\106\uffb0\001\002\000" +
    "\004\030\364\001\002\000\004\026\356\001\002\000\032" +
    "\004\101\005\107\006\103\007\117\010\113\026\111\033" +
    "\105\057\114\061\106\062\112\105\102\106\104\001\002" +
    "\000\042\027\360\032\131\033\122\035\127\036\135\037" +
    "\134\040\123\046\136\047\125\050\124\051\126\052\133" +
    "\053\130\054\137\055\120\056\121\001\002\000\004\030" +
    "\361\001\002\000\062\003\043\010\037\013\022\014\020" +
    "\015\015\016\063\017\010\020\032\021\007\022\067\023" +
    "\036\044\027\063\045\064\025\065\054\066\072\067\016" +
    "\073\046\074\044\075\041\076\055\103\065\104\011\106" +
    "\071\001\002\000\064\003\043\010\037\013\022\014\020" +
    "\015\015\016\063\017\010\020\032\021\007\022\067\023" +
    "\036\031\363\044\027\063\045\064\025\065\054\066\072" +
    "\067\016\073\046\074\044\075\041\076\055\103\065\104" +
    "\011\106\071\001\002\000\066\002\uffae\003\uffae\010\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\031\uffae\044\uffae\063\uffae\064\uffae" +
    "\065\uffae\066\uffae\067\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\103\uffae\104\uffae\106\uffae\001\002\000\062\003\043" +
    "\010\037\013\022\014\020\015\015\016\063\017\010\020" +
    "\032\021\007\022\067\023\036\044\027\063\045\064\025" +
    "\065\054\066\072\067\016\073\046\074\044\075\041\076" +
    "\055\103\065\104\011\106\071\001\002\000\064\003\043" +
    "\010\037\013\022\014\020\015\015\016\063\017\010\020" +
    "\032\021\007\022\067\023\036\031\366\044\027\063\045" +
    "\064\025\065\054\066\072\067\016\073\046\074\044\075" +
    "\041\076\055\103\065\104\011\106\071\001\002\000\066" +
    "\002\uffaf\003\uffaf\010\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\031\uffaf" +
    "\044\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\103\uffaf\104\uffaf\106\uffaf" +
    "\001\002\000\004\012\370\001\002\000\020\010\371\014" +
    "\020\015\015\016\063\017\010\020\032\104\011\001\002" +
    "\000\004\045\u0117\001\002\000\010\011\374\045\375\070" +
    "\373\001\002\000\004\071\u0100\001\002\000\066\002\uffc8" +
    "\003\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\031\uffc8\044\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\103\uffc8\104\uffc8\106\uffc8\001\002" +
    "\000\032\004\101\005\107\006\103\007\117\010\113\026" +
    "\111\033\105\057\114\061\106\062\112\105\102\106\104" +
    "\001\002\000\042\011\377\032\131\033\122\035\127\036" +
    "\135\037\134\040\123\046\136\047\125\050\124\051\126" +
    "\052\133\053\130\054\137\055\120\056\121\001\002\000" +
    "\066\002\uffc7\003\uffc7\010\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\031" +
    "\uffc7\044\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\076\uffc7\103\uffc7\104\uffc7\106" +
    "\uffc7\001\002\000\006\045\u0102\070\u0101\001\002\000\004" +
    "\071\u010a\001\002\000\004\070\u0103\001\002\000\032\004" +
    "\101\005\107\006\103\007\117\010\113\026\111\033\105" +
    "\057\114\061\106\062\112\105\102\106\104\001\002\000" +
    "\006\071\u0107\072\u0106\001\002\000\044\032\131\033\122" +
    "\035\127\036\135\037\134\040\123\046\136\047\125\050" +
    "\124\051\126\052\133\053\130\054\137\055\120\056\121" +
    "\071\uffcd\072\uffcd\001\002\000\032\004\101\005\107\006" +
    "\103\007\117\010\113\026\111\033\105\057\114\061\106" +
    "\062\112\105\102\106\104\001\002\000\004\011\u0108\001" +
    "\002\000\066\002\uffd0\003\uffd0\010\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\031\uffd0\044\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\103\uffd0\104" +
    "\uffd0\106\uffd0\001\002\000\044\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\046\136\047\125\050\124\051" +
    "\126\052\133\053\130\054\137\055\120\056\121\071\uffce" +
    "\072\uffce\001\002\000\004\045\u010b\001\002\000\004\070" +
    "\u010c\001\002\000\004\070\u010d\001\002\000\032\004\101" +
    "\005\107\006\103\007\117\010\113\026\111\033\105\057" +
    "\114\061\106\062\112\105\102\106\104\001\002\000\006" +
    "\071\u0110\072\u010f\001\002\000\004\070\u0112\001\002\000" +
    "\004\011\u0111\001\002\000\066\002\uffcf\003\uffcf\010\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\031\uffcf\044\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\103\uffcf\104\uffcf\106\uffcf\001\002\000\032\004\101" +
    "\005\107\006\103\007\117\010\113\026\111\033\105\057" +
    "\114\061\106\062\112\105\102\106\104\001\002\000\006" +
    "\071\u0114\072\u0106\001\002\000\006\071\uffcc\072\uffcc\001" +
    "\002\000\006\071\u0116\072\u0106\001\002\000\006\071\uffcb" +
    "\072\uffcb\001\002\000\004\030\u0118\001\002\000\004\010" +
    "\u0119\001\002\000\004\012\u0121\001\002\000\006\031\u011c" +
    "\072\u011b\001\002\000\004\010\u011e\001\002\000\004\011" +
    "\u011d\001\002\000\066\002\uffdf\003\uffdf\010\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\031\uffdf\044\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\103" +
    "\uffdf\104\uffdf\106\uffdf\001\002\000\004\012\u011f\001\002" +
    "\000\032\004\101\005\107\006\103\007\117\010\113\026" +
    "\111\033\105\057\114\061\106\062\112\105\102\106\104" +
    "\001\002\000\044\031\uffde\032\131\033\122\035\127\036" +
    "\135\037\134\040\123\046\136\047\125\050\124\051\126" +
    "\052\133\053\130\054\137\055\120\056\121\072\uffde\001" +
    "\002\000\032\004\101\005\107\006\103\007\117\010\113" +
    "\026\111\033\105\057\114\061\106\062\112\105\102\106" +
    "\104\001\002\000\044\031\uffdd\032\131\033\122\035\127" +
    "\036\135\037\134\040\123\046\136\047\125\050\124\051" +
    "\126\052\133\053\130\054\137\055\120\056\121\072\uffdd" +
    "\001\002\000\042\030\u0124\032\131\033\122\035\127\036" +
    "\135\037\134\040\123\046\136\047\125\050\124\051\126" +
    "\052\133\053\130\054\137\055\120\056\121\001\002\000" +
    "\032\004\101\005\107\006\103\007\117\010\113\026\111" +
    "\033\105\057\114\061\106\062\112\105\102\106\104\001" +
    "\002\000\040\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\026\uffaa\031\uffaa\033\uffaa\043\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\105\uffaa\106\uffaa\001\002\000\044\032\131" +
    "\033\122\035\127\036\135\037\134\040\123\043\u0136\046" +
    "\136\047\125\050\124\051\126\052\133\053\130\054\137" +
    "\055\120\056\121\060\u0135\001\002\000\040\004\101\005" +
    "\107\006\103\007\117\010\113\026\111\031\u012b\033\105" +
    "\043\u0128\057\114\060\u0129\061\106\062\112\105\102\106" +
    "\104\001\002\000\004\030\u0131\001\002\000\004\043\u012c" +
    "\001\002\000\040\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\026\uffa9\031\uffa9\033\uffa9\043\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\105\uffa9\106\uffa9\001\002\000\066\002" +
    "\uffad\003\uffad\010\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\031\uffad\044" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\073\uffad" +
    "\074\uffad\075\uffad\076\uffad\103\uffad\104\uffad\106\uffad\001" +
    "\002\000\004\030\u012d\001\002\000\062\003\043\010\037" +
    "\013\022\014\020\015\015\016\063\017\010\020\032\021" +
    "\007\022\067\023\036\044\027\063\045\064\025\065\054" +
    "\066\072\067\016\073\046\074\044\075\041\076\055\103" +
    "\065\104\011\106\071\001\002\000\064\003\043\010\037" +
    "\013\022\014\020\015\015\016\063\017\010\020\032\021" +
    "\007\022\067\023\036\031\u012f\044\027\063\045\064\025" +
    "\065\054\066\072\067\016\073\046\074\044\075\041\076" +
    "\055\103\065\104\011\106\071\001\002\000\004\031\u0130" +
    "\001\002\000\066\002\uffab\003\uffab\010\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\031\uffab\044\uffab\063\uffab\064\uffab\065\uffab\066" +
    "\uffab\067\uffab\073\uffab\074\uffab\075\uffab\076\uffab\103\uffab" +
    "\104\uffab\106\uffab\001\002\000\062\003\043\010\037\013" +
    "\022\014\020\015\015\016\063\017\010\020\032\021\007" +
    "\022\067\023\036\044\027\063\045\064\025\065\054\066" +
    "\072\067\016\073\046\074\044\075\041\076\055\103\065" +
    "\104\011\106\071\001\002\000\064\003\043\010\037\013" +
    "\022\014\020\015\015\016\063\017\010\020\032\021\007" +
    "\022\067\023\036\031\u0133\044\027\063\045\064\025\065" +
    "\054\066\072\067\016\073\046\074\044\075\041\076\055" +
    "\103\065\104\011\106\071\001\002\000\004\031\u0134\001" +
    "\002\000\066\002\uffac\003\uffac\010\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\031\uffac\044\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\073\uffac\074\uffac\075\uffac\076\uffac\103\uffac\104" +
    "\uffac\106\uffac\001\002\000\004\043\u013a\001\002\000\004" +
    "\030\u0137\001\002\000\062\003\043\010\037\013\022\014" +
    "\020\015\015\016\063\017\010\020\032\021\007\022\067" +
    "\023\036\044\027\063\045\064\025\065\054\066\072\067" +
    "\016\073\046\074\044\075\041\076\055\103\065\104\011" +
    "\106\071\001\002\000\064\003\043\010\037\013\022\014" +
    "\020\015\015\016\063\017\010\020\032\021\007\022\067" +
    "\023\036\031\u0139\044\027\063\045\064\025\065\054\066" +
    "\072\067\016\073\046\074\044\075\041\076\055\103\065" +
    "\104\011\106\071\001\002\000\040\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\026\uffa8\031\uffa8\033\uffa8\043\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\105\uffa8\106\uffa8\001" +
    "\002\000\004\030\u013b\001\002\000\062\003\043\010\037" +
    "\013\022\014\020\015\015\016\063\017\010\020\032\021" +
    "\007\022\067\023\036\044\027\063\045\064\025\065\054" +
    "\066\072\067\016\073\046\074\044\075\041\076\055\103" +
    "\065\104\011\106\071\001\002\000\064\003\043\010\037" +
    "\013\022\014\020\015\015\016\063\017\010\020\032\021" +
    "\007\022\067\023\036\031\u013d\044\027\063\045\064\025" +
    "\065\054\066\072\067\016\073\046\074\044\075\041\076" +
    "\055\103\065\104\011\106\071\001\002\000\040\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\026\uffa7\031\uffa7\033" +
    "\uffa7\043\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\105\uffa7" +
    "\106\uffa7\001\002\000\004\010\u013f\001\002\000\004\045" +
    "\u014d\001\002\000\032\004\101\005\107\006\103\007\117" +
    "\010\113\026\111\033\105\057\114\061\106\062\112\105" +
    "\102\106\104\001\002\000\042\011\u0142\032\131\033\122" +
    "\035\127\036\135\037\134\040\123\046\136\047\125\050" +
    "\124\051\126\052\133\053\130\054\137\055\120\056\121" +
    "\001\002\000\004\010\u0143\001\002\000\010\041\u014b\042" +
    "\u0149\045\u014a\001\002\000\004\027\u0145\001\002\000\004" +
    "\030\u0146\001\002\000\062\003\043\010\037\013\022\014" +
    "\020\015\015\016\063\017\010\020\032\021\007\022\067" +
    "\023\036\044\027\063\045\064\025\065\054\066\072\067" +
    "\016\073\046\074\044\075\041\076\055\103\065\104\011" +
    "\106\071\001\002\000\064\003\043\010\037\013\022\014" +
    "\020\015\015\016\063\017\010\020\032\021\007\022\067" +
    "\023\036\031\u0148\044\027\063\045\064\025\065\054\066" +
    "\072\067\016\073\046\074\044\075\041\076\055\103\065" +
    "\104\011\106\071\001\002\000\066\002\uffa6\003\uffa6\010" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\031\uffa6\044\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\103\uffa6\104\uffa6\106\uffa6\001\002\000\004\027" +
    "\uffa3\001\002\000\032\004\101\005\107\006\103\007\117" +
    "\010\113\026\111\033\105\057\114\061\106\062\112\105" +
    "\102\106\104\001\002\000\004\027\uffa4\001\002\000\042" +
    "\027\uffa5\032\131\033\122\035\127\036\135\037\134\040" +
    "\123\046\136\047\125\050\124\051\126\052\133\053\130" +
    "\054\137\055\120\056\121\001\002\000\032\004\101\005" +
    "\107\006\103\007\117\010\113\026\111\033\105\057\114" +
    "\061\106\062\112\105\102\106\104\001\002\000\042\011" +
    "\313\032\131\033\122\035\127\036\135\037\134\040\123" +
    "\046\136\047\125\050\124\051\126\052\133\053\130\054" +
    "\137\055\120\056\121\001\002\000\032\004\101\005\107" +
    "\006\103\007\117\010\113\026\111\033\105\057\114\061" +
    "\106\062\112\105\102\106\104\001\002\000\042\027\u0151" +
    "\032\131\033\122\035\127\036\135\037\134\040\123\046" +
    "\136\047\125\050\124\051\126\052\133\053\130\054\137" +
    "\055\120\056\121\001\002\000\004\011\u0152\001\002\000" +
    "\066\002\uffdb\003\uffdb\010\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\031" +
    "\uffdb\044\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\103\uffdb\104\uffdb\106" +
    "\uffdb\001\002\000\066\002\uffa1\003\uffa1\010\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\031\uffa1\044\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\067\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\103" +
    "\uffa1\104\uffa1\106\uffa1\001\002\000\004\026\u0155\001\002" +
    "\000\020\014\020\015\015\016\063\017\010\020\032\027" +
    "\u0157\104\011\001\002\000\006\027\u015e\072\u015d\001\002" +
    "\000\004\030\u015a\001\002\000\004\010\u0159\001\002\000" +
    "\006\027\uffb7\072\uffb7\001\002\000\062\003\043\010\037" +
    "\013\022\014\020\015\015\016\063\017\010\020\032\021" +
    "\007\022\067\023\036\044\027\063\045\064\025\065\054" +
    "\066\072\067\016\073\046\074\044\075\041\076\055\103" +
    "\065\104\011\106\071\001\002\000\064\003\043\010\037" +
    "\013\022\014\020\015\015\016\063\017\010\020\032\021" +
    "\007\022\067\023\036\031\u015c\044\027\063\045\064\025" +
    "\065\054\066\072\067\016\073\046\074\044\075\041\076" +
    "\055\103\065\104\011\106\071\001\002\000\066\002\uffb9" +
    "\003\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\031\uffb9\044\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\073\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\103\uffb9\104\uffb9\106\uffb9\001\002" +
    "\000\016\014\020\015\015\016\063\017\010\020\032\104" +
    "\011\001\002\000\004\030\u015f\001\002\000\062\003\043" +
    "\010\037\013\022\014\020\015\015\016\063\017\010\020" +
    "\032\021\007\022\067\023\036\044\027\063\045\064\025" +
    "\065\054\066\072\067\016\073\046\074\044\075\041\076" +
    "\055\103\065\104\011\106\071\001\002\000\064\003\043" +
    "\010\037\013\022\014\020\015\015\016\063\017\010\020" +
    "\032\021\007\022\067\023\036\031\u0161\044\027\063\045" +
    "\064\025\065\054\066\072\067\016\073\046\074\044\075" +
    "\041\076\055\103\065\104\011\106\071\001\002\000\066" +
    "\002\uffba\003\uffba\010\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\031\uffba" +
    "\044\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\073" +
    "\uffba\074\uffba\075\uffba\076\uffba\103\uffba\104\uffba\106\uffba" +
    "\001\002\000\004\010\u0163\001\002\000\006\027\uffb8\072" +
    "\uffb8\001\002\000\004\026\u0165\001\002\000\020\014\020" +
    "\015\015\016\063\017\010\020\032\027\u0167\104\011\001" +
    "\002\000\006\027\u016b\072\u015d\001\002\000\004\030\u0168" +
    "\001\002\000\062\003\043\010\037\013\022\014\020\015" +
    "\015\016\063\017\010\020\032\021\007\022\067\023\036" +
    "\044\027\063\045\064\025\065\054\066\072\067\016\073" +
    "\046\074\044\075\041\076\055\103\065\104\011\106\071" +
    "\001\002\000\064\003\043\010\037\013\022\014\020\015" +
    "\015\016\063\017\010\020\032\021\007\022\067\023\036" +
    "\031\u016a\044\027\063\045\064\025\065\054\066\072\067" +
    "\016\073\046\074\044\075\041\076\055\103\065\104\011" +
    "\106\071\001\002\000\066\002\uffd9\003\uffd9\010\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\031\uffd9\044\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\103\uffd9\104\uffd9\106\uffd9\001\002\000\004\030\u016c\001" +
    "\002\000\062\003\043\010\037\013\022\014\020\015\015" +
    "\016\063\017\010\020\032\021\007\022\067\023\036\044" +
    "\027\063\045\064\025\065\054\066\072\067\016\073\046" +
    "\074\044\075\041\076\055\103\065\104\011\106\071\001" +
    "\002\000\064\003\043\010\037\013\022\014\020\015\015" +
    "\016\063\017\010\020\032\021\007\022\067\023\036\031" +
    "\u016e\044\027\063\045\064\025\065\054\066\072\067\016" +
    "\073\046\074\044\075\041\076\055\103\065\104\011\106" +
    "\071\001\002\000\066\002\uffda\003\uffda\010\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\031\uffda\044\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\067\uffda\073\uffda\074\uffda\075\uffda\076\uffda\103" +
    "\uffda\104\uffda\106\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\100\002\063\003\025\004\020\006\055\007" +
    "\047\010\046\011\034\012\003\013\057\014\056\017\051" +
    "\021\030\022\065\023\011\024\022\025\032\027\060\032" +
    "\013\034\041\036\037\037\012\040\027\041\016\042\023" +
    "\044\033\045\061\046\052\047\004\051\067\053\050\054" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\004" +
    "\075\006\055\007\047\010\046\011\034\012\003\013\057" +
    "\014\056\017\051\021\030\022\065\023\011\024\022\025" +
    "\032\027\060\032\013\034\041\036\037\037\012\040\027" +
    "\041\016\042\023\044\033\045\061\046\052\047\004\051" +
    "\067\053\050\054\005\001\001\000\010\005\u0122\026\114" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\301\026\114\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\073\004\020" +
    "\006\055\007\047\010\046\011\034\012\003\013\057\014" +
    "\056\017\051\021\030\022\065\023\011\024\022\025\032" +
    "\027\060\032\013\034\041\036\037\037\012\040\027\041" +
    "\016\042\023\044\033\045\061\046\052\047\004\051\067" +
    "\053\050\054\005\001\001\000\074\004\075\006\055\007" +
    "\047\010\046\011\034\012\003\013\057\014\056\017\051" +
    "\021\030\022\065\023\011\024\022\025\032\027\060\032" +
    "\013\034\041\036\037\037\012\040\027\041\016\042\023" +
    "\044\033\045\061\046\052\047\004\051\067\053\050\054" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\115\026\114\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\216\026\114\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\212\012\211\026\114\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\157\026\114\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\156\026\114\045\107\001\001\000\010" +
    "\005\155\026\114\045\107\001\001\000\010\005\154\026" +
    "\114\045\107\001\001\000\010\005\153\026\114\045\107" +
    "\001\001\000\010\005\152\026\114\045\107\001\001\000" +
    "\010\005\151\026\114\045\107\001\001\000\010\005\150" +
    "\026\114\045\107\001\001\000\010\005\147\026\114\045" +
    "\107\001\001\000\010\005\146\026\114\045\107\001\001" +
    "\000\010\005\145\026\114\045\107\001\001\000\002\001" +
    "\001\000\010\005\143\026\114\045\107\001\001\000\010" +
    "\005\142\026\114\045\107\001\001\000\010\005\141\026" +
    "\114\045\107\001\001\000\010\005\140\026\114\045\107" +
    "\001\001\000\010\005\137\026\114\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\204\026\114\045\107\001\001\000" +
    "\002\001\001\000\012\005\165\026\114\035\164\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\171\026\114\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\177\026\114\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\202\026\114\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\207\026\114\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\215" +
    "\026\114\045\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\220\026\114\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\223\026\114\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\226\026\114\045\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\262\026\114" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\003\265\004\020\006\055\007\047\010\046\011\034" +
    "\012\003\013\057\014\056\017\051\021\030\022\065\023" +
    "\011\024\022\025\032\027\060\032\013\034\041\036\037" +
    "\037\012\040\027\041\016\042\023\044\033\045\061\046" +
    "\052\047\004\051\067\053\050\054\005\001\001\000\074" +
    "\004\075\006\055\007\047\010\046\011\034\012\003\013" +
    "\057\014\056\017\051\021\030\022\065\023\011\024\022" +
    "\025\032\027\060\032\013\034\041\036\037\037\012\040" +
    "\027\041\016\042\023\044\033\045\061\046\052\047\004" +
    "\051\067\053\050\054\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\165\026\114" +
    "\035\273\045\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\332\026\114\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\311\026" +
    "\114\045\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\317\026\114" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\323\026\114\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\327\026\114\045\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\340\026\114\045\107\001\001" +
    "\000\010\005\336\026\114\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\343\026\114\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\346\026\114\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\351\004\020\006\055\007\047\010\046\011\034\012\003" +
    "\013\057\014\056\017\051\021\030\022\065\023\011\024" +
    "\022\025\032\027\060\032\013\034\041\036\037\037\012" +
    "\040\027\041\016\042\023\044\033\045\061\046\052\047" +
    "\004\051\067\053\050\054\005\001\001\000\074\004\075" +
    "\006\055\007\047\010\046\011\034\012\003\013\057\014" +
    "\056\017\051\021\030\022\065\023\011\024\022\025\032" +
    "\027\060\032\013\034\041\036\037\037\012\040\027\041" +
    "\016\042\023\044\033\045\061\046\052\047\004\051\067" +
    "\053\050\054\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\356\026\114\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\361\004\020\006\055\007\047\010\046\011\034\012\003" +
    "\013\057\014\056\017\051\021\030\022\065\023\011\024" +
    "\022\025\032\027\060\032\013\034\041\036\037\037\012" +
    "\040\027\041\016\042\023\044\033\045\061\046\052\047" +
    "\004\051\067\053\050\054\005\001\001\000\074\004\075" +
    "\006\055\007\047\010\046\011\034\012\003\013\057\014" +
    "\056\017\051\021\030\022\065\023\011\024\022\025\032" +
    "\027\060\032\013\034\041\036\037\037\012\040\027\041" +
    "\016\042\023\044\033\045\061\046\052\047\004\051\067" +
    "\053\050\054\005\001\001\000\002\001\001\000\076\003" +
    "\364\004\020\006\055\007\047\010\046\011\034\012\003" +
    "\013\057\014\056\017\051\021\030\022\065\023\011\024" +
    "\022\025\032\027\060\032\013\034\041\036\037\037\012" +
    "\040\027\041\016\042\023\044\033\045\061\046\052\047" +
    "\004\051\067\053\050\054\005\001\001\000\074\004\075" +
    "\006\055\007\047\010\046\011\034\012\003\013\057\014" +
    "\056\017\051\021\030\022\065\023\011\024\022\025\032" +
    "\027\060\032\013\034\041\036\037\037\012\040\027\041" +
    "\016\042\023\044\033\045\061\046\052\047\004\051\067" +
    "\053\050\054\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\375\026\114\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\u0104\026\114\030\u0103\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u0108\026" +
    "\114\045\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u010d\001\001\000\012\005\u0104\026\114\030\u0114" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\u0104\026\114" +
    "\030\u0112\045\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u011f\026\114\045\107\001" +
    "\001\000\002\001\001\000\010\005\u0121\026\114\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\u0125\015\u0126\016\u0124\026\114\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\u0125\016\u0129\026" +
    "\114\045\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\003\u012d\004\020\006\055\007\047\010\046\011\034" +
    "\012\003\013\057\014\056\017\051\021\030\022\065\023" +
    "\011\024\022\025\032\027\060\032\013\034\041\036\037" +
    "\037\012\040\027\041\016\042\023\044\033\045\061\046" +
    "\052\047\004\051\067\053\050\054\005\001\001\000\074" +
    "\004\075\006\055\007\047\010\046\011\034\012\003\013" +
    "\057\014\056\017\051\021\030\022\065\023\011\024\022" +
    "\025\032\027\060\032\013\034\041\036\037\037\012\040" +
    "\027\041\016\042\023\044\033\045\061\046\052\047\004" +
    "\051\067\053\050\054\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\003\u0131\004\020\006\055\007\047" +
    "\010\046\011\034\012\003\013\057\014\056\017\051\021" +
    "\030\022\065\023\011\024\022\025\032\027\060\032\013" +
    "\034\041\036\037\037\012\040\027\041\016\042\023\044" +
    "\033\045\061\046\052\047\004\051\067\053\050\054\005" +
    "\001\001\000\074\004\075\006\055\007\047\010\046\011" +
    "\034\012\003\013\057\014\056\017\051\021\030\022\065" +
    "\023\011\024\022\025\032\027\060\032\013\034\041\036" +
    "\037\037\012\040\027\041\016\042\023\044\033\045\061" +
    "\046\052\047\004\051\067\053\050\054\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\u0137\004\020\006\055\007\047\010" +
    "\046\011\034\012\003\013\057\014\056\017\051\021\030" +
    "\022\065\023\011\024\022\025\032\027\060\032\013\034" +
    "\041\036\037\037\012\040\027\041\016\042\023\044\033" +
    "\045\061\046\052\047\004\051\067\053\050\054\005\001" +
    "\001\000\074\004\075\006\055\007\047\010\046\011\034" +
    "\012\003\013\057\014\056\017\051\021\030\022\065\023" +
    "\011\024\022\025\032\027\060\032\013\034\041\036\037" +
    "\037\012\040\027\041\016\042\023\044\033\045\061\046" +
    "\052\047\004\051\067\053\050\054\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\003\u013b\004\020\006" +
    "\055\007\047\010\046\011\034\012\003\013\057\014\056" +
    "\017\051\021\030\022\065\023\011\024\022\025\032\027" +
    "\060\032\013\034\041\036\037\037\012\040\027\041\016" +
    "\042\023\044\033\045\061\046\052\047\004\051\067\053" +
    "\050\054\005\001\001\000\074\004\075\006\055\007\047" +
    "\010\046\011\034\012\003\013\057\014\056\017\051\021" +
    "\030\022\065\023\011\024\022\025\032\027\060\032\013" +
    "\034\041\036\037\037\012\040\027\041\016\042\023\044" +
    "\033\045\061\046\052\047\004\051\067\053\050\054\005" +
    "\001\001\000\002\001\001\000\004\010\u013f\001\001\000" +
    "\002\001\001\000\010\005\u0140\026\114\045\107\001\001" +
    "\000\002\001\001\000\004\020\u0143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\003\u0146" +
    "\004\020\006\055\007\047\010\046\011\034\012\003\013" +
    "\057\014\056\017\051\021\030\022\065\023\011\024\022" +
    "\025\032\027\060\032\013\034\041\036\037\037\012\040" +
    "\027\041\016\042\023\044\033\045\061\046\052\047\004" +
    "\051\067\053\050\054\005\001\001\000\074\004\075\006" +
    "\055\007\047\010\046\011\034\012\003\013\057\014\056" +
    "\017\051\021\030\022\065\023\011\024\022\025\032\027" +
    "\060\032\013\034\041\036\037\037\012\040\027\041\016" +
    "\042\023\044\033\045\061\046\052\047\004\051\067\053" +
    "\050\054\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\u014b\026\114\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\u014d\026\114\045\107" +
    "\001\001\000\002\001\001\000\010\005\u014f\026\114\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u0157\033\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\003\u015a\004" +
    "\020\006\055\007\047\010\046\011\034\012\003\013\057" +
    "\014\056\017\051\021\030\022\065\023\011\024\022\025" +
    "\032\027\060\032\013\034\041\036\037\037\012\040\027" +
    "\041\016\042\023\044\033\045\061\046\052\047\004\051" +
    "\067\053\050\054\005\001\001\000\074\004\075\006\055" +
    "\007\047\010\046\011\034\012\003\013\057\014\056\017" +
    "\051\021\030\022\065\023\011\024\022\025\032\027\060" +
    "\032\013\034\041\036\037\037\012\040\027\041\016\042" +
    "\023\044\033\045\061\046\052\047\004\051\067\053\050" +
    "\054\005\001\001\000\002\001\001\000\004\012\u0161\001" +
    "\001\000\002\001\001\000\076\003\u015f\004\020\006\055" +
    "\007\047\010\046\011\034\012\003\013\057\014\056\017" +
    "\051\021\030\022\065\023\011\024\022\025\032\027\060" +
    "\032\013\034\041\036\037\037\012\040\027\041\016\042" +
    "\023\044\033\045\061\046\052\047\004\051\067\053\050" +
    "\054\005\001\001\000\074\004\075\006\055\007\047\010" +
    "\046\011\034\012\003\013\057\014\056\017\051\021\030" +
    "\022\065\023\011\024\022\025\032\027\060\032\013\034" +
    "\041\036\037\037\012\040\027\041\016\042\023\044\033" +
    "\045\061\046\052\047\004\051\067\053\050\054\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u0157\033\u0165\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\u0168\004\020" +
    "\006\055\007\047\010\046\011\034\012\003\013\057\014" +
    "\056\017\051\021\030\022\065\023\011\024\022\025\032" +
    "\027\060\032\013\034\041\036\037\037\012\040\027\041" +
    "\016\042\023\044\033\045\061\046\052\047\004\051\067" +
    "\053\050\054\005\001\001\000\074\004\075\006\055\007" +
    "\047\010\046\011\034\012\003\013\057\014\056\017\051" +
    "\021\030\022\065\023\011\024\022\025\032\027\060\032" +
    "\013\034\041\036\037\037\012\040\027\041\016\042\023" +
    "\044\033\045\061\046\052\047\004\051\067\053\050\054" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\003\u016c\004\020\006\055\007\047\010\046\011\034\012" +
    "\003\013\057\014\056\017\051\021\030\022\065\023\011" +
    "\024\022\025\032\027\060\032\013\034\041\036\037\037" +
    "\012\040\027\041\016\042\023\044\033\045\061\046\052" +
    "\047\004\051\067\053\050\054\005\001\001\000\074\004" +
    "\075\006\055\007\047\010\046\011\034\012\003\013\057" +
    "\014\056\017\051\021\030\022\065\023\011\024\022\025" +
    "\032\027\060\032\013\034\041\036\037\037\012\040\027" +
    "\041\016\042\023\044\033\045\061\046\052\047\004\051" +
    "\067\053\050\054\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public static ArrayList<tabla> listaTabla  = new ArrayList<>();

    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INCREMENTOYDECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= MATCH_SENTENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DECLARACIONVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= STARTWITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= RETORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= ASIGNACIONVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= APPENDLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= REMOVELISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= DECLARACIONSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= INSTANCIACIONSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= ASIGNACIONSTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= F_LENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F_LENGTH ::= LENGTH PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Length(a, aleft, aright); 
                                                        listaTabla.add(new tabla("LENGTH", null,null, null, a.toString(), aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F_LENGTH",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONSTRUCT ::= STRUCT LLAVE1 LISTA_STRUCT LLAVE2 ID FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Tipo> a = (HashMap<String,Tipo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionStruct(b, a, aleft, aright); 
    listaTabla.add(new tabla(b.toString(), null,null, "STRUCT", a.toString(), aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONSTRUCT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_STRUCT ::= LISTA_STRUCT FINCADENA ID DOSP TIPOS FINCADENA 
            {
              HashMap<String,Tipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap<String,Tipo> a = (HashMap<String,Tipo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.put(b, c); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_STRUCT ::= ID DOSP TIPOS 
            {
              HashMap<String,Tipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 HashMap<String, Tipo> atributos = new HashMap<>(); atributos.put(a, b); RESULT = atributos; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTANCIACIONSTRUCT ::= MUTABILIDAD ID DOSP ID IGUAL LLAVE1 VALORES_STRUCT LLAVE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Instruccion> d = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InstanciacionStruct(a, b, c, d, aleft, aright); 
                        listaTabla.add(new tabla(b.toString(), null,null, c.toString(), d.toString(), aleft, aright));    
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIACIONSTRUCT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALORES_STRUCT ::= VALORES_STRUCT COMA ID DOSP EXPRESION 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.put(b, c); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALORES_STRUCT ::= ID DOSP EXPRESION 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 HashMap<String, Instruccion> valores = new HashMap<>(); valores.put(a, b); RESULT = valores; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_STRUCT",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACIONSTRUCT ::= ID PUNTO ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionStruct(a, b, c, aleft, aright); 
                        listaTabla.add(new tabla(a.toString(), null,null, b.toString(), c.toString(), aleft, aright)); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONSTRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IMPRESION ::= PRINTLN PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Funcion(b, p, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Funcion(b, new LinkedList<HashMap>(), c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETORNO ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                              RESULT = new Return(a, a.getTipo(), aleft, aright); 
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETORNO ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                              RESULT = new Return(aleft, aright); 
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAMADA ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACIONLISTA ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionLista(b, a,aleft, aright); 
                        listaTabla.add(new tabla(b.toString(), a.getTipo().toString(),a.getTipo().toString(), "DECLARACION" , "LIST", aleft, aright));  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // APPENDLISTA ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Append(a, b, aleft, aright); 
                listaTabla.add(new tabla(a.toString(), null,null, "DECLARACION" , b.toString(), aleft, aright));  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDLISTA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACIONLISTA ::= ID BRIZQ EXPRESION BRDER IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionLista(a.toString(), b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONLISTA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // REMOVELISTA ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Remove(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVELISTA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACIONVEC ::= MUTABILIDAD ID DOSP TIPOS BRIZQ BRDER IGUAL BRIZQ LISTAVALORES BRDER FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(m, b, c, a, aleft, aright); 
                    listaTabla.add(new tabla(b.toString(), a.getTipo().toString(),a.getTipo().toString(), m.toString() , c.toString(), aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVEC",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACIONVEC ::= MUTABILIDAD ID DOSP TIPOS BRIZQ BRDER BRIZQ BRDER IGUAL BRIZQ LISTAVALORES2D BRDER FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Object>> c = (LinkedList<LinkedList<Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(m, b, c, a, aleft, aright);
                    listaTabla.add(new tabla(b.toString(), a.getTipo().toString(),a.getTipo().toString(), m.toString() , c.toString(), aleft, aright));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVEC",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTAVALORES ::= LISTAVALORES COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTAVALORES ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Object> lista = new LinkedList<>(); lista.add(a); RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTAVALORES2D ::= LISTAVALORES2D COMA BRIZQ LISTAVALORES BRDER 
            {
              LinkedList<LinkedList<Object>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Object>> a = (LinkedList<LinkedList<Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTAVALORES2D ::= BRIZQ LISTAVALORES BRDER 
            {
              LinkedList<LinkedList<Object>> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<LinkedList<Object>> lista2D = new LinkedList<>(); lista2D.add(b); RESULT = lista2D; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACIONVEC ::= ID BRIZQ EXPRESION BRDER IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACIONVEC ::= ID BRIZQ EXPRESION BRDER BRIZQ EXPRESION BRDER IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector2D(a, b, d, e, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= MUTABILIDAD ID DOSP TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                listaTabla.add(new tabla(b, a.getTipo().toString(), null,"DECLARACION",null, aleft, aright));
                RESULT = new Declaracion(m, b, null, a, aleft, aright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= MUTABILIDAD ID DOSP TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(m, b, c, a, aleft, aright); 
                            Object valor = (c instanceof Nativo) ? ((Nativo) c).getValor() : c;
                            listaTabla.add(new tabla(b, a.getTipo().toString(), a.getTipo().toString(), "Declaracion", valor, aleft, aright));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
                                                    Object valor = (b instanceof Nativo) ? ((Nativo) b).getValor() : b;
                                                    listaTabla.add(new tabla(a, null, null, "Asignacion", valor, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOS ::= STR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.STRUCT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		 RESULT = "CONST"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		 RESULT = "VAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO_VOID ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_VOID",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STARTWITH ::= START ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTWITH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STARTWITH ::= START ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTWITH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METODO ::= TIPO_VOID ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODO ::= TIPO_VOID ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASTEO ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft, aright); 
                                            Object valor = (b instanceof Nativo) ? ((Nativo) b).getValor() : b;
                                            listaTabla.add(new tabla("Casteo",a.toString(), a.getTipo().toString()  , "Casteo", valor, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INCREMENTOYDECREMENTO ::= ID INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
                                                            
                                                            listaTabla.add(new tabla(a,null, "++"  , "INCREMENTO", null, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INCREMENTOYDECREMENTO ::= ID DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
                                                        listaTabla.add(new tabla(a,null, "--"  , "DECREMENTO", null, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INCREMENTOYDECREMENTO ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
                                                    Object valor = (b instanceof Nativo) ? ((Nativo) b).getValor() : b;
                                                    listaTabla.add(new tabla(a, null, b.getTipo().toString(), "Asignacion", valor, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new If(a,b,aleft,aright);  listaTabla.add(new tabla("IF", null, "IF", "bloque", null, aleft, aright));
                                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); listaTabla.add(new tabla("IF-ELSE",null, "IF-ELSE", "bloque", null, aleft, aright));
                                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSEIF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseIf(a, b, c, d, aleft, aright); listaTabla.add(new tabla("IF-ELSE-IF", null, "IF-ELSE-IF", "bloque", null, aleft, aright));
                                                                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, null, aleft, aright); 

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST FLECHA LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST GUIONBAJO FLECHA LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASES_LIST ::= CASE 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASES_LIST ::= CASES_LIST CASE 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASE ::= EXPRESION FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASE ::= EXPRESION GUIONBAJO FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);  
    listaTabla.add(new tabla("FOR", null, "FOR", "bloque", "Expresiones", aleft, aright));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ACTUALIZA_FOR ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ACTUALIZA_FOR ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
    listaTabla.add(new tabla("WHILE", null, null, "bloque", "Expresiones", aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright);
    listaTabla.add(new tabla("WHILE", null, "DOWHILE", "bloque", "Expresiones", aleft, aright));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "SUMA", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MENOS", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MULTIPLICACION", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "DIVISION", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MODULO", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "POTENCIA", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "EQUALS", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION NOTEQUALS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "NOTEQUALS", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MAYOR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MAYORQUE", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MENOR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "MENORQUE", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "OR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "AND", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "XOR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, null, OperadoresLogicos.NOT, aleft, aright); listaTabla.add(new tabla("EXPRESION", null, "OPERACION", "NOT", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(0), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= ID BRIZQ EXPRESION BRDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= ID BRIZQ EXPRESION BRDER BRIZQ EXPRESION BRDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector2D(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoStruct(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= TOSTRING PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); listaTabla.add(new tabla("LENGTH", null,null, null, a.toString(), aleft, aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Remove(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= ID PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
