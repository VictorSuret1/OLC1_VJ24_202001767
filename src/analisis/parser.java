
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import java.util.ArrayList;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.Casteo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.IfElse;
import instrucciones.IfElseIf;
import instrucciones.Case;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Continue;
import excepciones.tabla;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import excepciones.Errores;
import expresiones.OperadoresLogicos;
import expresiones.Logicos;
import expresiones.AccesoVar;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\006\007\000\002\007\007\000\002\007\011\000" +
    "\002\010\006\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\006\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\013\011\000" +
    "\002\014\015\000\002\015\020\000\002\016\007\000\002" +
    "\016\013\000\002\016\014\000\002\017\003\000\002\017" +
    "\004\000\002\020\007\000\002\020\010\000\002\022\014" +
    "\000\002\023\005\000\002\023\004\000\002\023\004\000" +
    "\002\026\004\000\002\027\004\000\002\024\011\000\002" +
    "\025\013\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\034\003\027\010\017\013\025\021\030\022" +
    "\041\023\016\026\032\044\040\063\026\064\037\065\010" +
    "\067\021\070\006\001\002\000\040\002\ufff6\003\ufff6\010" +
    "\ufff6\013\ufff6\021\ufff6\022\ufff6\023\ufff6\026\ufff6\031\ufff6" +
    "\044\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6\070\ufff6\001" +
    "\002\000\040\002\ufffe\003\ufffe\010\ufffe\013\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\026\ufffe\031\ufffe\044\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\067\ufffe\070\ufffe\001\002\000\004\011\270" +
    "\001\002\000\040\002\ufff2\003\ufff2\010\ufff2\013\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\026\ufff2\031\ufff2\044\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\067\ufff2\070\ufff2\001\002\000\004\026" +
    "\262\001\002\000\040\002\ufffc\003\ufffc\010\ufffc\013\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\026\ufffc\031\ufffc\044\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\067\ufffc\070\ufffc\001\002\000\040" +
    "\002\ufff9\003\ufff9\010\ufff9\013\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\026\ufff9\031\ufff9\044\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\067\ufff9\070\ufff9\001\002\000\036\002\000\003\027\010" +
    "\017\013\025\021\030\022\041\023\016\026\032\044\040" +
    "\063\026\064\037\065\010\067\021\070\006\001\002\000" +
    "\040\002\ufff0\003\ufff0\010\ufff0\013\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\026\ufff0\031\ufff0\044\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\067\ufff0\070\ufff0\001\002\000\040\002\ufff3\003\ufff3" +
    "\010\ufff3\013\ufff3\021\ufff3\022\ufff3\023\ufff3\026\ufff3\031" +
    "\ufff3\044\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\070\ufff3" +
    "\001\002\000\004\026\241\001\002\000\010\041\235\042" +
    "\233\045\234\001\002\000\040\002\ufffa\003\ufffa\010\ufffa" +
    "\013\ufffa\021\ufffa\022\ufffa\023\ufffa\026\ufffa\031\ufffa\044" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\001\002" +
    "\000\004\030\223\001\002\000\040\002\ufff7\003\ufff7\010" +
    "\ufff7\013\ufff7\021\ufff7\022\ufff7\023\ufff7\026\ufff7\031\ufff7" +
    "\044\ufff7\063\ufff7\064\ufff7\065\ufff7\067\ufff7\070\ufff7\001" +
    "\002\000\040\002\ufff1\003\ufff1\010\ufff1\013\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\026\ufff1\031\ufff1\044\ufff1\063\ufff1\064" +
    "\ufff1\065\ufff1\067\ufff1\070\ufff1\001\002\000\040\002\ufffb" +
    "\003\ufffb\010\ufffb\013\ufffb\021\ufffb\022\ufffb\023\ufffb\026" +
    "\ufffb\031\ufffb\044\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb" +
    "\070\ufffb\001\002\000\004\026\217\001\002\000\004\011" +
    "\216\001\002\000\004\011\215\001\002\000\004\010\uffe5" +
    "\001\002\000\040\002\ufff4\003\ufff4\010\ufff4\013\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\026\ufff4\031\ufff4\044\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\067\ufff4\070\ufff4\001\002\000\014\014" +
    "\205\015\201\016\200\017\204\020\203\001\002\000\004" +
    "\010\176\001\002\000\040\002\ufff5\003\ufff5\010\ufff5\013" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\026\ufff5\031\ufff5\044\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5\001\002\000" +
    "\040\002\ufff8\003\ufff8\010\ufff8\013\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\026\ufff8\031\ufff8\044\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\067\ufff8\070\ufff8\001\002\000\040\002\ufffd\003\ufffd" +
    "\010\ufffd\013\ufffd\021\ufffd\022\ufffd\023\ufffd\026\ufffd\031" +
    "\ufffd\044\ufffd\063\ufffd\064\ufffd\065\ufffd\067\ufffd\070\ufffd" +
    "\001\002\000\004\026\154\001\002\000\026\004\044\005" +
    "\050\006\045\007\056\010\053\026\051\033\046\057\054" +
    "\061\047\062\052\001\002\000\004\010\uffe4\001\002\000" +
    "\004\002\043\001\002\000\004\002\001\001\002\000\110" +
    "\002\uffb9\003\uffb9\010\uffb9\011\uffb9\013\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\043\uffb9\044" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\060\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\067\uffb9\070\uffb9\001\002\000\110\002\uffba\003\uffba" +
    "\010\uffba\011\uffba\013\uffba\021\uffba\022\uffba\023\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\043\uffba\044\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\060\uffba\063\uffba\064\uffba\065\uffba\067\uffba\070" +
    "\uffba\001\002\000\026\004\044\005\050\006\045\007\056" +
    "\010\053\026\051\033\046\057\054\061\047\062\052\001" +
    "\002\000\110\002\uffb7\003\uffb7\010\uffb7\011\uffb7\013\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\067\uffb7\070\uffb7\001\002\000\110\002" +
    "\uffbb\003\uffbb\010\uffbb\011\uffbb\013\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\044\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\067\uffbb\070\uffbb\001\002\000\026\004\044\005\050\006" +
    "\045\007\056\010\053\026\051\033\046\057\054\061\047" +
    "\062\052\001\002\000\110\002\uffb6\003\uffb6\010\uffb6\011" +
    "\uffb6\013\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\070\uffb6\001\002" +
    "\000\110\002\uffb5\003\uffb5\010\uffb5\011\uffb5\013\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\043" +
    "\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\067\uffb5\070\uffb5\001\002\000\026\004\044" +
    "\005\050\006\045\007\056\010\053\026\051\033\046\057" +
    "\054\061\047\062\052\001\002\000\042\030\066\032\071" +
    "\033\061\035\067\036\074\037\073\040\062\046\075\047" +
    "\064\050\063\051\065\052\072\053\070\054\076\055\057" +
    "\056\060\001\002\000\110\002\uffb8\003\uffb8\010\uffb8\011" +
    "\uffb8\013\uffb8\021\uffb8\022\uffb8\023\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\043\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\070\uffb8\001\002" +
    "\000\026\004\044\005\050\006\045\007\056\010\053\026" +
    "\051\033\046\057\054\061\047\062\052\001\002\000\026" +
    "\004\044\005\050\006\045\007\056\010\053\026\051\033" +
    "\046\057\054\061\047\062\052\001\002\000\026\004\044" +
    "\005\050\006\045\007\056\010\053\026\051\033\046\057" +
    "\054\061\047\062\052\001\002\000\026\004\044\005\050" +
    "\006\045\007\056\010\053\026\051\033\046\057\054\061" +
    "\047\062\052\001\002\000\026\004\044\005\050\006\045" +
    "\007\056\010\053\026\051\033\046\057\054\061\047\062" +
    "\052\001\002\000\026\004\044\005\050\006\045\007\056" +
    "\010\053\026\051\033\046\057\054\061\047\062\052\001" +
    "\002\000\026\004\044\005\050\006\045\007\056\010\053" +
    "\026\051\033\046\057\054\061\047\062\052\001\002\000" +
    "\026\004\044\005\050\006\045\007\056\010\053\026\051" +
    "\033\046\057\054\061\047\062\052\001\002\000\026\004" +
    "\044\005\050\006\045\007\056\010\053\026\051\033\046" +
    "\057\054\061\047\062\052\001\002\000\026\004\044\005" +
    "\050\006\045\007\056\010\053\026\051\033\046\057\054" +
    "\061\047\062\052\001\002\000\026\004\044\005\050\006" +
    "\045\007\056\010\053\026\051\033\046\057\054\061\047" +
    "\062\052\001\002\000\026\004\044\005\050\006\045\007" +
    "\056\010\053\026\051\033\046\057\054\061\047\062\052" +
    "\001\002\000\026\004\044\005\050\006\045\007\056\010" +
    "\053\026\051\033\046\057\054\061\047\062\052\001\002" +
    "\000\026\004\044\005\050\006\045\007\056\010\053\026" +
    "\051\033\046\057\054\061\047\062\052\001\002\000\026" +
    "\004\044\005\050\006\045\007\056\010\053\026\051\033" +
    "\046\057\054\061\047\062\052\001\002\000\026\004\044" +
    "\005\050\006\045\007\056\010\053\026\051\033\046\057" +
    "\054\061\047\062\052\001\002\000\110\002\uffc0\003\uffc0" +
    "\010\uffc0\011\uffc0\013\uffc0\021\uffc0\022\uffc0\023\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\071\033\061\035\067" +
    "\036\074\037\073\040\062\043\uffc0\044\uffc0\046\075\047" +
    "\064\050\063\051\065\052\072\053\070\054\uffc0\055\057" +
    "\056\060\060\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\070" +
    "\uffc0\001\002\000\110\002\uffc6\003\uffc6\010\uffc6\011\uffc6" +
    "\013\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\071\033\061\035\067\036\074\037\073" +
    "\040\062\043\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6\001\002\000" +
    "\110\002\uffc9\003\uffc9\010\uffc9\011\uffc9\013\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040\062\043\uffc9" +
    "\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\067\uffc9\070\uffc9\001\002\000\110\002\uffc8\003" +
    "\uffc8\010\uffc8\011\uffc8\013\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\062\043\uffc8\044\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\060\uffc8\063\uffc8\064\uffc8\065\uffc8\067\uffc8" +
    "\070\uffc8\001\002\000\110\002\uffc4\003\uffc4\010\uffc4\011" +
    "\uffc4\013\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\071\033\061\035\067\036\074\037" +
    "\073\040\062\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4\001\002" +
    "\000\110\002\uffcc\003\uffcc\010\uffcc\011\uffcc\013\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\035\067\036\074\037\073\040\062\043" +
    "\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\067\uffcc\070\uffcc\001\002\000\110\002\uffc3" +
    "\003\uffc3\010\uffc3\011\uffc3\013\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\071\033\061" +
    "\035\067\036\074\037\073\040\062\043\uffc3\044\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\060\uffc3\063\uffc3\064\uffc3\065\uffc3\067" +
    "\uffc3\070\uffc3\001\002\000\110\002\uffca\003\uffca\010\uffca" +
    "\011\uffca\013\uffca\021\uffca\022\uffca\023\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\062\043\uffca\044\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\060\uffca\063\uffca\064\uffca\065\uffca\067\uffca\070\uffca\001" +
    "\002\000\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\026\uffd9\031\uffd9\033\uffd9\043\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\001\002\000\044\032\071\033\061\035\067" +
    "\036\074\037\073\040\062\043\131\046\075\047\064\050" +
    "\063\051\065\052\072\053\070\054\076\055\057\056\060" +
    "\060\130\001\002\000\034\004\044\005\050\006\045\007" +
    "\056\010\053\026\051\031\113\033\046\043\114\057\054" +
    "\060\112\061\047\062\052\001\002\000\004\043\123\001" +
    "\002\000\040\002\uffdc\003\uffdc\010\uffdc\013\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\026\uffdc\031\uffdc\044\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\067\uffdc\070\uffdc\001\002\000\004\030\116" +
    "\001\002\000\034\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\026\uffd8\031\uffd8\033\uffd8\043\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\001\002\000\034\003\027\010\017\013" +
    "\025\021\030\022\041\023\016\026\032\044\040\063\026" +
    "\064\037\065\010\067\021\070\006\001\002\000\036\003" +
    "\027\010\017\013\025\021\030\022\041\023\016\026\032" +
    "\031\121\044\040\063\026\064\037\065\010\067\021\070" +
    "\006\001\002\000\040\002\uffff\003\uffff\010\uffff\013\uffff" +
    "\021\uffff\022\uffff\023\uffff\026\uffff\031\uffff\044\uffff\063" +
    "\uffff\064\uffff\065\uffff\067\uffff\070\uffff\001\002\000\004" +
    "\031\122\001\002\000\040\002\uffdb\003\uffdb\010\uffdb\013" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\031\uffdb\044\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\067\uffdb\070\uffdb\001\002\000" +
    "\004\030\124\001\002\000\034\003\027\010\017\013\025" +
    "\021\030\022\041\023\016\026\032\044\040\063\026\064" +
    "\037\065\010\067\021\070\006\001\002\000\036\003\027" +
    "\010\017\013\025\021\030\022\041\023\016\026\032\031" +
    "\126\044\040\063\026\064\037\065\010\067\021\070\006" +
    "\001\002\000\004\031\127\001\002\000\040\002\uffda\003" +
    "\uffda\010\uffda\013\uffda\021\uffda\022\uffda\023\uffda\026\uffda" +
    "\031\uffda\044\uffda\063\uffda\064\uffda\065\uffda\067\uffda\070" +
    "\uffda\001\002\000\004\043\135\001\002\000\004\030\132" +
    "\001\002\000\034\003\027\010\017\013\025\021\030\022" +
    "\041\023\016\026\032\044\040\063\026\064\037\065\010" +
    "\067\021\070\006\001\002\000\036\003\027\010\017\013" +
    "\025\021\030\022\041\023\016\026\032\031\134\044\040" +
    "\063\026\064\037\065\010\067\021\070\006\001\002\000" +
    "\034\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\026\uffd7" +
    "\031\uffd7\033\uffd7\043\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\001\002\000\004\030\136\001\002\000\034\003\027" +
    "\010\017\013\025\021\030\022\041\023\016\026\032\044" +
    "\040\063\026\064\037\065\010\067\021\070\006\001\002" +
    "\000\036\003\027\010\017\013\025\021\030\022\041\023" +
    "\016\026\032\031\140\044\040\063\026\064\037\065\010" +
    "\067\021\070\006\001\002\000\034\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\026\uffd6\031\uffd6\033\uffd6\043\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\062\uffd6\001\002\000\110\002" +
    "\uffc1\003\uffc1\010\uffc1\011\uffc1\013\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\071\033" +
    "\061\035\067\036\074\037\073\040\062\043\uffc1\044\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\067\uffc1\070\uffc1\001\002\000\110\002\uffc5\003\uffc5\010" +
    "\uffc5\011\uffc5\013\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\071\033\061\035\067\036" +
    "\074\037\073\040\062\043\uffc5\044\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\067\uffc5\070\uffc5" +
    "\001\002\000\110\002\uffc2\003\uffc2\010\uffc2\011\uffc2\013" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\071\033\061\035\067\036\074\037\073\040" +
    "\062\043\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\060\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\067\uffc2\070\uffc2\001\002\000\106" +
    "\002\uffc7\003\uffc7\010\uffc7\011\uffc7\013\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\035\uffc7\036\uffc7\037\uffc7\043\uffc7\044\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\060\uffc7\063\uffc7\064\uffc7\065\uffc7\067" +
    "\uffc7\070\uffc7\001\002\000\110\002\uffcb\003\uffcb\010\uffcb" +
    "\011\uffcb\013\uffcb\021\uffcb\022\uffcb\023\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\067\036\074" +
    "\037\073\040\062\043\uffcb\044\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\060\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070\uffcb\001" +
    "\002\000\110\002\uffbe\003\uffbe\010\uffbe\011\uffbe\013\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\071\033\061\035\067\036\074\037\073\040\062" +
    "\043\uffbe\044\uffbe\046\075\047\064\050\063\051\065\052" +
    "\072\053\070\054\uffbe\055\uffbe\056\uffbe\060\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\067\uffbe\070\uffbe\001\002\000\110\002" +
    "\uffbf\003\uffbf\010\uffbf\011\uffbf\013\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\071\033" +
    "\061\035\067\036\074\037\073\040\062\043\uffbf\044\uffbf" +
    "\046\075\047\064\050\063\051\065\052\072\053\070\054" +
    "\uffbf\055\uffbf\056\060\060\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\067\uffbf\070\uffbf\001\002\000\110\002\uffbd\003\uffbd\010" +
    "\uffbd\011\uffbd\013\uffbd\021\uffbd\022\uffbd\023\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\071\033\061\035\067\036" +
    "\074\037\073\040\062\043\uffbd\044\uffbd\046\075\047\064" +
    "\050\063\051\065\052\072\053\070\054\uffbd\055\uffbd\056" +
    "\uffbd\060\uffbd\063\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd" +
    "\001\002\000\042\027\152\032\071\033\061\035\067\036" +
    "\074\037\073\040\062\046\075\047\064\050\063\051\065" +
    "\052\072\053\070\054\076\055\057\056\060\001\002\000" +
    "\110\002\uffbc\003\uffbc\010\uffbc\011\uffbc\013\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\043\uffbc" +
    "\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\067\uffbc\070\uffbc\001\002\000\110\002\uffcd\003" +
    "\uffcd\010\uffcd\011\uffcd\013\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\043\uffcd\044\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\060\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd" +
    "\070\uffcd\001\002\000\004\010\155\001\002\000\004\045" +
    "\173\001\002\000\026\004\044\005\050\006\045\007\056" +
    "\010\053\026\051\033\046\057\054\061\047\062\052\001" +
    "\002\000\042\011\160\032\071\033\061\035\067\036\074" +
    "\037\073\040\062\046\075\047\064\050\063\051\065\052" +
    "\072\053\070\054\076\055\057\056\060\001\002\000\004" +
    "\010\161\001\002\000\010\041\171\042\167\045\170\001" +
    "\002\000\004\027\163\001\002\000\004\030\164\001\002" +
    "\000\034\003\027\010\017\013\025\021\030\022\041\023" +
    "\016\026\032\044\040\063\026\064\037\065\010\067\021" +
    "\070\006\001\002\000\036\003\027\010\017\013\025\021" +
    "\030\022\041\023\016\026\032\031\166\044\040\063\026" +
    "\064\037\065\010\067\021\070\006\001\002\000\040\002" +
    "\uffd5\003\uffd5\010\uffd5\013\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\026\uffd5\031\uffd5\044\uffd5\063\uffd5\064\uffd5\065\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\004\027\uffd2\001\002\000\026" +
    "\004\044\005\050\006\045\007\056\010\053\026\051\033" +
    "\046\057\054\061\047\062\052\001\002\000\004\027\uffd3" +
    "\001\002\000\042\027\uffd4\032\071\033\061\035\067\036" +
    "\074\037\073\040\062\046\075\047\064\050\063\051\065" +
    "\052\072\053\070\054\076\055\057\056\060\001\002\000" +
    "\026\004\044\005\050\006\045\007\056\010\053\026\051" +
    "\033\046\057\054\061\047\062\052\001\002\000\042\011" +
    "\175\032\071\033\061\035\067\036\074\037\073\040\062" +
    "\046\075\047\064\050\063\051\065\052\072\053\070\054" +
    "\076\055\057\056\060\001\002\000\060\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\013\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\026\uffeb\031\uffeb\033\uffeb\044\uffeb" +
    "\057\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\067" +
    "\uffeb\070\uffeb\001\002\000\004\012\177\001\002\000\014" +
    "\014\205\015\201\016\200\017\204\020\203\001\002\000" +
    "\010\011\uffe8\027\uffe8\045\uffe8\001\002\000\010\011\uffe9" +
    "\027\uffe9\045\uffe9\001\002\000\006\011\206\045\207\001" +
    "\002\000\010\011\uffe6\027\uffe6\045\uffe6\001\002\000\010" +
    "\011\uffe7\027\uffe7\045\uffe7\001\002\000\010\011\uffea\027" +
    "\uffea\045\uffea\001\002\000\040\002\uffed\003\uffed\010\uffed" +
    "\013\uffed\021\uffed\022\uffed\023\uffed\026\uffed\031\uffed\044" +
    "\uffed\063\uffed\064\uffed\065\uffed\067\uffed\070\uffed\001\002" +
    "\000\026\004\044\005\050\006\045\007\056\010\053\026" +
    "\051\033\046\057\054\061\047\062\052\001\002\000\042" +
    "\011\211\032\071\033\061\035\067\036\074\037\073\040" +
    "\062\046\075\047\064\050\063\051\065\052\072\053\070" +
    "\054\076\055\057\056\060\001\002\000\040\002\uffec\003" +
    "\uffec\010\uffec\013\uffec\021\uffec\022\uffec\023\uffec\026\uffec" +
    "\031\uffec\044\uffec\063\uffec\064\uffec\065\uffec\067\uffec\070" +
    "\uffec\001\002\000\004\027\213\001\002\000\026\004\044" +
    "\005\050\006\045\007\056\010\053\026\051\033\046\057" +
    "\054\061\047\062\052\001\002\000\076\002\uffe3\003\uffe3" +
    "\010\uffe3\013\uffe3\021\uffe3\022\uffe3\023\uffe3\026\uffe3\031" +
    "\uffe3\032\071\033\061\035\067\036\074\037\073\040\062" +
    "\044\uffe3\046\075\047\064\050\063\051\065\052\072\053" +
    "\070\054\076\055\057\056\060\063\uffe3\064\uffe3\065\uffe3" +
    "\067\uffe3\070\uffe3\001\002\000\040\002\uffef\003\uffef\010" +
    "\uffef\013\uffef\021\uffef\022\uffef\023\uffef\026\uffef\031\uffef" +
    "\044\uffef\063\uffef\064\uffef\065\uffef\067\uffef\070\uffef\001" +
    "\002\000\040\002\uffd1\003\uffd1\010\uffd1\013\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\026\uffd1\031\uffd1\044\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\067\uffd1\070\uffd1\001\002\000\026\004\044" +
    "\005\050\006\045\007\056\010\053\026\051\033\046\057" +
    "\054\061\047\062\052\001\002\000\042\027\221\032\071" +
    "\033\061\035\067\036\074\037\073\040\062\046\075\047" +
    "\064\050\063\051\065\052\072\053\070\054\076\055\057" +
    "\056\060\001\002\000\004\011\222\001\002\000\040\002" +
    "\uffee\003\uffee\010\uffee\013\uffee\021\uffee\022\uffee\023\uffee" +
    "\026\uffee\031\uffee\044\uffee\063\uffee\064\uffee\065\uffee\067" +
    "\uffee\070\uffee\001\002\000\034\003\027\010\017\013\025" +
    "\021\030\022\041\023\016\026\032\044\040\063\026\064" +
    "\037\065\010\067\021\070\006\001\002\000\036\003\027" +
    "\010\017\013\025\021\030\022\041\023\016\026\032\031" +
    "\225\044\040\063\026\064\037\065\010\067\021\070\006" +
    "\001\002\000\004\065\226\001\002\000\004\026\227\001" +
    "\002\000\026\004\044\005\050\006\045\007\056\010\053" +
    "\026\051\033\046\057\054\061\047\062\052\001\002\000" +
    "\042\027\231\032\071\033\061\035\067\036\074\037\073" +
    "\040\062\046\075\047\064\050\063\051\065\052\072\053" +
    "\070\054\076\055\057\056\060\001\002\000\004\011\232" +
    "\001\002\000\040\002\uffce\003\uffce\010\uffce\013\uffce\021" +
    "\uffce\022\uffce\023\uffce\026\uffce\031\uffce\044\uffce\063\uffce" +
    "\064\uffce\065\uffce\067\uffce\070\uffce\001\002\000\004\011" +
    "\240\001\002\000\026\004\044\005\050\006\045\007\056" +
    "\010\053\026\051\033\046\057\054\061\047\062\052\001" +
    "\002\000\004\011\236\001\002\000\040\002\uffe2\003\uffe2" +
    "\010\uffe2\013\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2\031" +
    "\uffe2\044\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2\070\uffe2" +
    "\001\002\000\100\002\uffe0\003\uffe0\010\uffe0\011\175\013" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\026\uffe0\031\uffe0\032\071" +
    "\033\061\035\067\036\074\037\073\040\062\044\uffe0\046" +
    "\075\047\064\050\063\051\065\052\072\053\070\054\076" +
    "\055\057\056\060\063\uffe0\064\uffe0\065\uffe0\067\uffe0\070" +
    "\uffe0\001\002\000\040\002\uffe1\003\uffe1\010\uffe1\013\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\026\uffe1\031\uffe1\044\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\067\uffe1\070\uffe1\001\002\000\026" +
    "\004\044\005\050\006\045\007\056\010\053\026\051\033" +
    "\046\057\054\061\047\062\052\001\002\000\042\027\243" +
    "\032\071\033\061\035\067\036\074\037\073\040\062\046" +
    "\075\047\064\050\063\051\065\052\072\053\070\054\076" +
    "\055\057\056\060\001\002\000\004\030\244\001\002\000" +
    "\034\003\027\010\017\013\025\021\030\022\041\023\016" +
    "\026\032\044\040\063\026\064\037\065\010\067\021\070" +
    "\006\001\002\000\036\003\027\010\017\013\025\021\030" +
    "\022\041\023\016\026\032\031\246\044\040\063\026\064" +
    "\037\065\010\067\021\070\006\001\002\000\044\002\uffdf" +
    "\003\uffdf\010\uffdf\013\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\247\025\250\026\uffdf\031\uffdf\044\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\067\uffdf\070\uffdf\001\002\000\004\030\257\001" +
    "\002\000\004\026\251\001\002\000\026\004\044\005\050" +
    "\006\045\007\056\010\053\026\051\033\046\057\054\061" +
    "\047\062\052\001\002\000\042\027\253\032\071\033\061" +
    "\035\067\036\074\037\073\040\062\046\075\047\064\050" +
    "\063\051\065\052\072\053\070\054\076\055\057\056\060" +
    "\001\002\000\004\030\254\001\002\000\034\003\027\010" +
    "\017\013\025\021\030\022\041\023\016\026\032\044\040" +
    "\063\026\064\037\065\010\067\021\070\006\001\002\000" +
    "\036\003\027\010\017\013\025\021\030\022\041\023\016" +
    "\026\032\031\256\044\040\063\026\064\037\065\010\067" +
    "\021\070\006\001\002\000\040\002\uffdd\003\uffdd\010\uffdd" +
    "\013\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd\031\uffdd\044" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd\070\uffdd\001\002" +
    "\000\034\003\027\010\017\013\025\021\030\022\041\023" +
    "\016\026\032\044\040\063\026\064\037\065\010\067\021" +
    "\070\006\001\002\000\036\003\027\010\017\013\025\021" +
    "\030\022\041\023\016\026\032\031\261\044\040\063\026" +
    "\064\037\065\010\067\021\070\006\001\002\000\040\002" +
    "\uffde\003\uffde\010\uffde\013\uffde\021\uffde\022\uffde\023\uffde" +
    "\026\uffde\031\uffde\044\uffde\063\uffde\064\uffde\065\uffde\067" +
    "\uffde\070\uffde\001\002\000\026\004\044\005\050\006\045" +
    "\007\056\010\053\026\051\033\046\057\054\061\047\062" +
    "\052\001\002\000\042\027\264\032\071\033\061\035\067" +
    "\036\074\037\073\040\062\046\075\047\064\050\063\051" +
    "\065\052\072\053\070\054\076\055\057\056\060\001\002" +
    "\000\004\030\265\001\002\000\034\003\027\010\017\013" +
    "\025\021\030\022\041\023\016\026\032\044\040\063\026" +
    "\064\037\065\010\067\021\070\006\001\002\000\036\003" +
    "\027\010\017\013\025\021\030\022\041\023\016\026\032" +
    "\031\267\044\040\063\026\064\037\065\010\067\021\070" +
    "\006\001\002\000\040\002\uffcf\003\uffcf\010\uffcf\013\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\026\uffcf\031\uffcf\044\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\067\uffcf\070\uffcf\001\002\000\040" +
    "\002\uffd0\003\uffd0\010\uffd0\013\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\026\uffd0\031\uffd0\044\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\067\uffd0\070\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\046\002\041\003\012\004\004\006\035\007" +
    "\010\010\023\011\017\013\011\014\034\015\021\016\003" +
    "\022\033\024\030\025\014\026\006\027\022\031\032\032" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\117\006\035\007\010" +
    "\010\023\011\017\013\011\014\034\015\021\016\003\022" +
    "\033\024\030\025\014\026\006\027\022\031\032\032\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\146" +
    "\001\001\000\004\005\145\001\001\000\004\005\144\001" +
    "\001\000\004\005\143\001\001\000\004\005\142\001\001" +
    "\000\004\005\141\001\001\000\004\005\140\001\001\000" +
    "\010\005\107\017\110\020\106\001\001\000\004\005\105" +
    "\001\001\000\004\005\104\001\001\000\004\005\103\001" +
    "\001\000\004\005\102\001\001\000\004\005\101\001\001" +
    "\000\004\005\100\001\001\000\004\005\077\001\001\000" +
    "\004\005\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\107\020\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\116\004\004\006\035\007" +
    "\010\010\023\011\017\013\011\014\034\015\021\016\003" +
    "\022\033\024\030\025\014\026\006\027\022\031\032\032" +
    "\013\001\001\000\042\004\117\006\035\007\010\010\023" +
    "\011\017\013\011\014\034\015\021\016\003\022\033\024" +
    "\030\025\014\026\006\027\022\031\032\032\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\124\004\004\006\035\007\010" +
    "\010\023\011\017\013\011\014\034\015\021\016\003\022" +
    "\033\024\030\025\014\026\006\027\022\031\032\032\013" +
    "\001\001\000\042\004\117\006\035\007\010\010\023\011" +
    "\017\013\011\014\034\015\021\016\003\022\033\024\030" +
    "\025\014\026\006\027\022\031\032\032\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\132\004\004\006\035\007\010\010" +
    "\023\011\017\013\011\014\034\015\021\016\003\022\033" +
    "\024\030\025\014\026\006\027\022\031\032\032\013\001" +
    "\001\000\042\004\117\006\035\007\010\010\023\011\017" +
    "\013\011\014\034\015\021\016\003\022\033\024\030\025" +
    "\014\026\006\027\022\031\032\032\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\136\004\004\006" +
    "\035\007\010\010\023\011\017\013\011\014\034\015\021" +
    "\016\003\022\033\024\030\025\014\026\006\027\022\031" +
    "\032\032\013\001\001\000\042\004\117\006\035\007\010" +
    "\010\023\011\017\013\011\014\034\015\021\016\003\022" +
    "\033\024\030\025\014\026\006\027\022\031\032\032\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\155\001\001\000\002\001\001\000\004\005\156\001" +
    "\001\000\002\001\001\000\004\023\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\164\004\004\006\035\007\010\010\023\011\017\013\011" +
    "\014\034\015\021\016\003\022\033\024\030\025\014\026" +
    "\006\027\022\031\032\032\013\001\001\000\042\004\117" +
    "\006\035\007\010\010\023\011\017\013\011\014\034\015" +
    "\021\016\003\022\033\024\030\025\014\026\006\027\022" +
    "\031\032\032\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\223\004\004\006\035\007" +
    "\010\010\023\011\017\013\011\014\034\015\021\016\003" +
    "\022\033\024\030\025\014\026\006\027\022\031\032\032" +
    "\013\001\001\000\042\004\117\006\035\007\010\010\023" +
    "\011\017\013\011\014\034\015\021\016\003\022\033\024" +
    "\030\025\014\026\006\027\022\031\032\032\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\244\004\004\006\035\007\010\010\023" +
    "\011\017\013\011\014\034\015\021\016\003\022\033\024" +
    "\030\025\014\026\006\027\022\031\032\032\013\001\001" +
    "\000\042\004\117\006\035\007\010\010\023\011\017\013" +
    "\011\014\034\015\021\016\003\022\033\024\030\025\014" +
    "\026\006\027\022\031\032\032\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\254\004\004\006\035\007\010\010\023\011\017\013\011" +
    "\014\034\015\021\016\003\022\033\024\030\025\014\026" +
    "\006\027\022\031\032\032\013\001\001\000\042\004\117" +
    "\006\035\007\010\010\023\011\017\013\011\014\034\015" +
    "\021\016\003\022\033\024\030\025\014\026\006\027\022" +
    "\031\032\032\013\001\001\000\002\001\001\000\044\003" +
    "\257\004\004\006\035\007\010\010\023\011\017\013\011" +
    "\014\034\015\021\016\003\022\033\024\030\025\014\026" +
    "\006\027\022\031\032\032\013\001\001\000\042\004\117" +
    "\006\035\007\010\010\023\011\017\013\011\014\034\015" +
    "\021\016\003\022\033\024\030\025\014\026\006\027\022" +
    "\031\032\032\013\001\001\000\002\001\001\000\004\005" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\265\004\004\006\035\007\010\010\023\011\017\013" +
    "\011\014\034\015\021\016\003\022\033\024\030\025\014" +
    "\026\006\027\022\031\032\032\013\001\001\000\042\004" +
    "\117\006\035\007\010\010\023\011\017\013\011\014\034" +
    "\015\021\016\003\022\033\024\030\025\014\026\006\027" +
    "\022\031\032\032\013\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static ArrayList<tabla> listaTabla  = new ArrayList<>();


    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INCREMENTOYDECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SIF_ELSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SIF_ELSEIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= MATCH_SENTENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IMPRESION ::= PRINTLN PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
                                                            Object valor = (a instanceof Nativo) ? ((Nativo) a).getValor() : a;
                                                            listaTabla.add(new tabla("null", "IMPRESION", "iMPRESION", "IMPRESION", a, aleft, aright));
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= MUTABILIDAD ID DOSP TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(m, b, null, a, aleft, aright); 

                listaTabla.add(new tabla(b, "Variable", a.getTipo().toString(), "Declaracion", "null", aleft, aright));


                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= MUTABILIDAD ID DOSP TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(m, b, c, a, aleft, aright); 
                            Object valor = (c instanceof Nativo) ? ((Nativo) c).getValor() : c;
                            listaTabla.add(new tabla(b, "Variable", a.getTipo().toString(), "Declaracion", valor, aleft, aright));

                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		 RESULT = "CONST"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		 RESULT = "VAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASTEO ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INCREMENTOYDECREMENTO ::= ID INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INCREMENTOYDECREMENTO ::= ID DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INCREMENTOYDECREMENTO ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new If(a,b,aleft,aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIF_ELSE ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF_ELSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIF_ELSEIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSEIF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseIf(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF_ELSEIF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST FLECHA LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST GUIONBAJO FLECHA LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASES_LIST ::= CASE 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASES_LIST ::= CASES_LIST CASE 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASE ::= EXPRESION FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASE ::= EXPRESION GUIONBAJO FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ACTUALIZA_FOR ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ACTUALIZA_FOR ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION NOTEQUALS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, null, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(0), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
