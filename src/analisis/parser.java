
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import java.util.ArrayList;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.Casteo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.IfElse;
import instrucciones.IfElseIf;
import instrucciones.Case;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Continue;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionVector2D;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Funcion;
import instrucciones.Return;
import instrucciones.AccesoVector2D;
import instrucciones.AsignacionVector;
import instrucciones.AsignacionVector2D;
import excepciones.tabla;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import excepciones.Errores;
import expresiones.OperadoresLogicos;
import expresiones.Logicos;
import expresiones.AccesoVar;
import expresiones.AccesoVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\006\007\000" +
    "\002\027\015\000\002\027\017\000\002\031\005\000\002" +
    "\031\003\000\002\032\007\000\002\032\005\000\002\041" +
    "\011\000\002\041\014\000\002\007\007\000\002\007\011" +
    "\000\002\010\006\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\025\003\000\002\025\003\000\002\040" +
    "\012\000\002\040\011\000\002\037\005\000\002\033\012" +
    "\000\002\033\011\000\002\034\006\000\002\034\004\000" +
    "\002\035\010\000\002\035\007\000\002\036\005\000\002" +
    "\036\003\000\002\026\006\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\013\011\000\002\013\015" +
    "\000\002\013\020\000\002\014\007\000\002\014\013\000" +
    "\002\014\014\000\002\015\003\000\002\015\004\000\002" +
    "\016\007\000\002\016\010\000\002\017\014\000\002\020" +
    "\005\000\002\020\004\000\002\020\004\000\002\023\004" +
    "\000\002\024\004\000\002\021\011\000\002\022\013\000" +
    "\002\005\003\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\006\000\002\005\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\052\003\034\010\031\013\015\014\013\015" +
    "\010\016\050\017\005\020\024\021\006\022\053\023\027" +
    "\044\021\063\036\064\017\065\043\066\054\067\012\073" +
    "\037\074\035\075\032\001\002\000\004\010\365\001\002" +
    "\000\014\010\uffdd\011\uffdd\027\uffdd\045\uffdd\070\uffdd\001" +
    "\002\000\004\010\uffda\001\002\000\056\002\ufff4\003\ufff4" +
    "\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\031\ufff4\044\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\067\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\001\002\000\014\010\uffdf\011\uffdf\027\uffdf\045\uffdf" +
    "\070\uffdf\001\002\000\056\002\ufff1\003\ufff1\010\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\031\ufff1\044\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\073\ufff1\074\ufff1\075\ufff1\001\002" +
    "\000\004\011\364\001\002\000\014\010\uffe0\011\uffe0\027" +
    "\uffe0\045\uffe0\070\uffe0\001\002\000\056\002\ufffe\003\ufffe" +
    "\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\031\ufffe\044\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\073\ufffe\074\ufffe\075" +
    "\ufffe\001\002\000\004\026\360\001\002\000\056\002\ufff3" +
    "\003\ufff3\010\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\031\ufff3\044\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\073\ufff3\074" +
    "\ufff3\075\ufff3\001\002\000\004\026\337\001\002\000\054" +
    "\002\000\003\034\010\031\013\015\014\013\015\010\016" +
    "\050\017\005\020\024\021\006\022\053\023\027\044\021" +
    "\063\036\064\017\065\043\066\054\067\012\073\037\074" +
    "\035\075\032\001\002\000\026\004\063\005\066\006\064" +
    "\007\076\010\072\026\070\033\065\057\073\061\067\062" +
    "\071\001\002\000\056\002\uffee\003\uffee\010\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\031\uffee\044\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\073\uffee\074\uffee\075\uffee\001\002\000" +
    "\056\002\ufff6\003\ufff6\010\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\031" +
    "\ufff6\044\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\073\ufff6\074\ufff6\075\ufff6\001\002\000\014\010\uffdc\011" +
    "\uffdc\027\uffdc\045\uffdc\070\uffdc\001\002\000\004\010\245" +
    "\001\002\000\056\002\ufffa\003\ufffa\010\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\031\ufffa\044\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\073\ufffa\074\ufffa\075\ufffa\001\002\000\004" +
    "\026\224\001\002\000\056\002\uffef\003\uffef\010\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\031\uffef\044\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\073\uffef\074\uffef\075\uffef\001\002" +
    "\000\012\041\204\042\202\045\203\070\201\001\002\000" +
    "\026\004\063\005\066\006\064\007\076\010\072\026\070" +
    "\033\065\057\073\061\067\062\071\001\002\000\056\002" +
    "\ufff0\003\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0\044" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\001\002\000\004\011\176\001\002\000" +
    "\004\010\164\001\002\000\004\011\163\001\002\000\014" +
    "\010\uffdb\011\uffdb\027\uffdb\045\uffdb\070\uffdb\001\002\000" +
    "\056\002\ufffb\003\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\031" +
    "\ufffb\044\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\073\ufffb\074\ufffb\075\ufffb\001\002\000\056\002\ufffc\003" +
    "\ufffc\010\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\031\ufffc\044\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\001\002\000\056\002\ufff7\003\ufff7\010\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\031\ufff7\044\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002" +
    "\000\004\026\155\001\002\000\056\002\ufffd\003\ufffd\010" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\031\ufffd\044\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\001\002\000\056\002\ufff8\003\ufff8\010\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\031\ufff8\044\ufff8\063\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\073\ufff8\074\ufff8\075\ufff8\001\002\000\056" +
    "\002\ufff2\003\ufff2\010\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2" +
    "\044\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\001\002\000\056\002\ufff9\003\ufff9" +
    "\010\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\031\ufff9\044\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\001\002\000\014\010\uffde\011\uffde\027\uffde\045\uffde" +
    "\070\uffde\001\002\000\004\002\154\001\002\000\056\002" +
    "\ufff5\003\ufff5\010\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\031\ufff5\044" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\073\ufff5" +
    "\074\ufff5\075\ufff5\001\002\000\004\010\uffd9\001\002\000" +
    "\004\030\055\001\002\000\052\003\034\010\031\013\015" +
    "\014\013\015\010\016\050\017\005\020\024\021\006\022" +
    "\053\023\027\044\021\063\036\064\017\065\043\066\054" +
    "\067\012\073\037\074\035\075\032\001\002\000\054\003" +
    "\034\010\031\013\015\014\013\015\010\016\050\017\005" +
    "\020\024\021\006\022\053\023\027\031\057\044\021\063" +
    "\036\064\017\065\043\066\054\067\012\073\037\074\035" +
    "\075\032\001\002\000\004\065\061\001\002\000\056\002" +
    "\uffff\003\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\031\uffff\044" +
    "\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\073\uffff" +
    "\074\uffff\075\uffff\001\002\000\004\026\062\001\002\000" +
    "\026\004\063\005\066\006\064\007\076\010\072\026\070" +
    "\033\065\057\073\061\067\062\071\001\002\000\132\002" +
    "\uffa2\003\uffa2\010\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\043\uffa2\044\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\060\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\001\002\000\132" +
    "\002\uffa3\003\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\043\uffa3\044\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\060\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\001\002\000" +
    "\026\004\063\005\066\006\064\007\076\010\072\026\070" +
    "\033\065\057\073\061\067\062\071\001\002\000\132\002" +
    "\uffa4\003\uffa4\010\uffa4\011\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\043\uffa4\044\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\060\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\071" +
    "\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\001\002\000\132" +
    "\002\uffa0\003\uffa0\010\uffa0\011\uffa0\013\uffa0\014\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\060\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\001\002\000" +
    "\042\004\063\005\066\006\064\007\076\010\072\014\013" +
    "\015\010\016\050\017\005\020\024\026\070\033\065\057" +
    "\073\061\067\062\071\073\037\001\002\000\132\002\uff9f" +
    "\003\uff9f\010\uff9f\011\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\043\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\071\uff9f" +
    "\072\uff9f\073\uff9f\074\uff9f\075\uff9f\001\002\000\134\002" +
    "\uff9e\003\uff9e\010\uff9e\011\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\043\uff9e\044\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\060\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070" +
    "\140\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\001\002" +
    "\000\026\004\063\005\066\006\064\007\076\010\072\026" +
    "\070\033\065\057\073\061\067\062\071\001\002\000\132" +
    "\002\uffb7\003\uffb7\010\uffb7\011\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\060\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000" +
    "\042\027\111\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\046\115\047\104\050\103\051\105\052\112\053" +
    "\107\054\116\055\077\056\100\001\002\000\132\002\uffa1" +
    "\003\uffa1\010\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\043\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\060" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\071\uffa1" +
    "\072\uffa1\073\uffa1\074\uffa1\075\uffa1\001\002\000\026\004" +
    "\063\005\066\006\064\007\076\010\072\026\070\033\065" +
    "\057\073\061\067\062\071\001\002\000\026\004\063\005" +
    "\066\006\064\007\076\010\072\026\070\033\065\057\073" +
    "\061\067\062\071\001\002\000\026\004\063\005\066\006" +
    "\064\007\076\010\072\026\070\033\065\057\073\061\067" +
    "\062\071\001\002\000\026\004\063\005\066\006\064\007" +
    "\076\010\072\026\070\033\065\057\073\061\067\062\071" +
    "\001\002\000\026\004\063\005\066\006\064\007\076\010" +
    "\072\026\070\033\065\057\073\061\067\062\071\001\002" +
    "\000\026\004\063\005\066\006\064\007\076\010\072\026" +
    "\070\033\065\057\073\061\067\062\071\001\002\000\026" +
    "\004\063\005\066\006\064\007\076\010\072\026\070\033" +
    "\065\057\073\061\067\062\071\001\002\000\026\004\063" +
    "\005\066\006\064\007\076\010\072\026\070\033\065\057" +
    "\073\061\067\062\071\001\002\000\026\004\063\005\066" +
    "\006\064\007\076\010\072\026\070\033\065\057\073\061" +
    "\067\062\071\001\002\000\026\004\063\005\066\006\064" +
    "\007\076\010\072\026\070\033\065\057\073\061\067\062" +
    "\071\001\002\000\004\011\124\001\002\000\026\004\063" +
    "\005\066\006\064\007\076\010\072\026\070\033\065\057" +
    "\073\061\067\062\071\001\002\000\026\004\063\005\066" +
    "\006\064\007\076\010\072\026\070\033\065\057\073\061" +
    "\067\062\071\001\002\000\026\004\063\005\066\006\064" +
    "\007\076\010\072\026\070\033\065\057\073\061\067\062" +
    "\071\001\002\000\026\004\063\005\066\006\064\007\076" +
    "\010\072\026\070\033\065\057\073\061\067\062\071\001" +
    "\002\000\026\004\063\005\066\006\064\007\076\010\072" +
    "\026\070\033\065\057\073\061\067\062\071\001\002\000" +
    "\132\002\uffa9\003\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\110\033\102\035\106" +
    "\036\114\037\113\040\101\043\uffa9\044\uffa9\046\115\047" +
    "\104\050\103\051\105\052\112\053\107\054\uffa9\055\077" +
    "\056\100\060\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\001\002" +
    "\000\132\002\uffaf\003\uffaf\010\uffaf\011\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\027\uffaf\030\uffaf\031\uffaf\032\110\033\102\035" +
    "\106\036\114\037\113\040\101\043\uffaf\044\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\060\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001" +
    "\002\000\132\002\uffb2\003\uffb2\010\uffb2\011\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\101\043\uffb2\044\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\060\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2" +
    "\001\002\000\132\002\uffb1\003\uffb1\010\uffb1\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\101\043\uffb1\044\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\060\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\001\002\000\132\002\uffad\003\uffad\010\uffad\011\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\027\uffad\030\uffad\031\uffad\032\110" +
    "\033\102\035\106\036\114\037\113\040\101\043\uffad\044" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\060\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\071\uffad\072\uffad\073\uffad\074\uffad" +
    "\075\uffad\001\002\000\056\002\uffb8\003\uffb8\010\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\031\uffb8\044\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002" +
    "\000\132\002\uffb5\003\uffb5\010\uffb5\011\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035" +
    "\106\036\114\037\113\040\101\043\uffb5\044\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\060\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001" +
    "\002\000\132\002\uffac\003\uffac\010\uffac\011\uffac\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\027\uffac\030\uffac\031\uffac\032\110\033\102" +
    "\035\106\036\114\037\113\040\101\043\uffac\044\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\060\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\001\002\000\132\002\uffb3\003\uffb3\010\uffb3\011\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\101\043\uffb3\044\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\060\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\001\002\000\132\002\uffaa\003\uffaa\010\uffaa\011\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\027\uffaa\030\uffaa\031\uffaa\032\110" +
    "\033\102\035\106\036\114\037\113\040\101\043\uffaa\044" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\060\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\067\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa" +
    "\075\uffaa\001\002\000\132\002\uffae\003\uffae\010\uffae\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\110\033\102\035\106\036\114\037\113\040\101\043\uffae" +
    "\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\060\uffae\063\uffae\064\uffae" +
    "\065\uffae\066\uffae\067\uffae\071\uffae\072\uffae\073\uffae\074" +
    "\uffae\075\uffae\001\002\000\132\002\uffab\003\uffab\010\uffab" +
    "\011\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\110\033\102\035\106\036\114\037\113\040\101\043" +
    "\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\060\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\075\uffab\001\002\000\132\002\uffb4\003\uffb4\010" +
    "\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\035\106\036\114\037\113\040\101" +
    "\043\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\060\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\071\uffb4\072\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\001\002\000\130\002\uffb0\003\uffb0" +
    "\010\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\043" +
    "\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\001\002\000\132\002\uffa7\003\uffa7\010" +
    "\uffa7\011\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\uffa7\021\uffa7\022\uffa7\023\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\110\033\102\035\106\036\114\037\113\040\101" +
    "\043\uffa7\044\uffa7\046\115\047\104\050\103\051\105\052" +
    "\112\053\107\054\uffa7\055\uffa7\056\uffa7\060\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\001\002\000\132\002\uffa8\003\uffa8" +
    "\010\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\110\033\102\035\106\036\114\037\113\040" +
    "\101\043\uffa8\044\uffa8\046\115\047\104\050\103\051\105" +
    "\052\112\053\107\054\uffa8\055\uffa8\056\100\060\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\071\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\075\uffa8\001\002\000\132\002\uffa6\003" +
    "\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\043\uffa6\044\uffa6\046\115\047\104\050\103\051" +
    "\105\052\112\053\107\054\uffa6\055\uffa6\056\uffa6\060\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\001\002\000\026\004\063" +
    "\005\066\006\064\007\076\010\072\026\070\033\065\057" +
    "\073\061\067\062\071\001\002\000\042\032\110\033\102" +
    "\035\106\036\114\037\113\040\101\046\115\047\104\050" +
    "\103\051\105\052\112\053\107\054\116\055\077\056\100" +
    "\071\142\001\002\000\134\002\uff9d\003\uff9d\010\uff9d\011" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\043\uff9d" +
    "\044\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\070\143\071\uff9d\072\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\001\002\000\026\004\063\005\066" +
    "\006\064\007\076\010\072\026\070\033\065\057\073\061" +
    "\067\062\071\001\002\000\042\032\110\033\102\035\106" +
    "\036\114\037\113\040\101\046\115\047\104\050\103\051" +
    "\105\052\112\053\107\054\116\055\077\056\100\071\145" +
    "\001\002\000\132\002\uff9c\003\uff9c\010\uff9c\011\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\043\uff9c\044\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\060\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\001\002\000\004\027\151\001\002\000\042\027\150" +
    "\032\110\033\102\035\106\036\114\037\113\040\101\046" +
    "\115\047\104\050\103\051\105\052\112\053\107\054\116" +
    "\055\077\056\100\001\002\000\132\002\uffa5\003\uffa5\010" +
    "\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\043\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\067\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\001\002\000\026\004\063\005\066" +
    "\006\064\007\076\010\072\026\070\033\065\057\073\061" +
    "\067\062\071\001\002\000\132\002\uffcd\003\uffcd\010\uffcd" +
    "\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\110\033\102\035\106\036\114\037\113\040\101\043" +
    "\uffcd\044\uffcd\046\115\047\104\050\103\051\105\052\112" +
    "\053\107\054\116\055\077\056\100\060\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\071\uffcd\072\uffcd\073\uffcd" +
    "\074\uffcd\075\uffcd\001\002\000\132\002\uffb6\003\uffb6\010" +
    "\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\067\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\001\002\000\004\002\001\001\002" +
    "\000\026\004\063\005\066\006\064\007\076\010\072\026" +
    "\070\033\065\057\073\061\067\062\071\001\002\000\042" +
    "\027\157\032\110\033\102\035\106\036\114\037\113\040" +
    "\101\046\115\047\104\050\103\051\105\052\112\053\107" +
    "\054\116\055\077\056\100\001\002\000\004\030\160\001" +
    "\002\000\052\003\034\010\031\013\015\014\013\015\010" +
    "\016\050\017\005\020\024\021\006\022\053\023\027\044" +
    "\021\063\036\064\017\065\043\066\054\067\012\073\037" +
    "\074\035\075\032\001\002\000\054\003\034\010\031\013" +
    "\015\014\013\015\010\016\050\017\005\020\024\021\006" +
    "\022\053\023\027\031\162\044\021\063\036\064\017\065" +
    "\043\066\054\067\012\073\037\074\035\075\032\001\002" +
    "\000\056\002\uffb9\003\uffb9\010\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\031\uffb9\044\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\056\002\uffbb" +
    "\003\uffbb\010\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\031\uffbb\044\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\001\002\000\004\026\165\001\002\000\030" +
    "\004\063\005\066\006\064\007\076\010\072\026\070\027" +
    "\166\033\065\057\073\061\067\062\071\001\002\000\004" +
    "\011\175\001\002\000\006\027\172\072\171\001\002\000" +
    "\044\027\uffce\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\046\115\047\104\050\103\051\105\052\112\053" +
    "\107\054\116\055\077\056\100\072\uffce\001\002\000\026" +
    "\004\063\005\066\006\064\007\076\010\072\026\070\033" +
    "\065\057\073\061\067\062\071\001\002\000\004\011\173" +
    "\001\002\000\056\002\uffd1\003\uffd1\010\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\031\uffd1\044\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002\000\044" +
    "\027\uffcf\032\110\033\102\035\106\036\114\037\113\040" +
    "\101\046\115\047\104\050\103\051\105\052\112\053\107" +
    "\054\116\055\077\056\100\072\uffcf\001\002\000\056\002" +
    "\uffd0\003\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\031\uffd0\044" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\001\002\000\056\002\uffed\003\uffed\010" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\031\uffed\044\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\073\uffed\074\uffed\075\uffed" +
    "\001\002\000\042\011\200\032\110\033\102\035\106\036" +
    "\114\037\113\040\101\046\115\047\104\050\103\051\105" +
    "\052\112\053\107\054\116\055\077\056\100\001\002\000" +
    "\056\002\uffd6\003\uffd6\010\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\031" +
    "\uffd6\044\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\001\002\000\026\004\063\005" +
    "\066\006\064\007\076\010\072\026\070\033\065\057\073" +
    "\061\067\062\071\001\002\000\004\011\210\001\002\000" +
    "\026\004\063\005\066\006\064\007\076\010\072\026\070" +
    "\033\065\057\073\061\067\062\071\001\002\000\004\011" +
    "\205\001\002\000\056\002\uffcc\003\uffcc\010\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\031\uffcc\044\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000" +
    "\116\002\uffca\003\uffca\010\uffca\011\207\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\031\uffca\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\044\uffca\046\115\047\104\050\103\051\105\052" +
    "\112\053\107\054\116\055\077\056\100\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\073\uffca\074\uffca\075\uffca\001" +
    "\002\000\100\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\026\uffe1\031\uffe1" +
    "\033\uffe1\044\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\073\uffe1\074\uffe1\075\uffe1" +
    "\001\002\000\056\002\uffcb\003\uffcb\010\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\031\uffcb\044\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\067\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000\042" +
    "\032\110\033\102\035\106\036\114\037\113\040\101\046" +
    "\115\047\104\050\103\051\105\052\112\053\107\054\116" +
    "\055\077\056\100\071\212\001\002\000\006\045\214\070" +
    "\213\001\002\000\026\004\063\005\066\006\064\007\076" +
    "\010\072\026\070\033\065\057\073\061\067\062\071\001" +
    "\002\000\026\004\063\005\066\006\064\007\076\010\072" +
    "\026\070\033\065\057\073\061\067\062\071\001\002\000" +
    "\042\011\216\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\046\115\047\104\050\103\051\105\052\112\053" +
    "\107\054\116\055\077\056\100\001\002\000\056\002\uffe5" +
    "\003\uffe5\010\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\031\uffe5\044\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\001\002\000\042\032\110\033\102\035\106" +
    "\036\114\037\113\040\101\046\115\047\104\050\103\051" +
    "\105\052\112\053\107\054\116\055\077\056\100\071\220" +
    "\001\002\000\004\045\221\001\002\000\026\004\063\005" +
    "\066\006\064\007\076\010\072\026\070\033\065\057\073" +
    "\061\067\062\071\001\002\000\042\011\223\032\110\033" +
    "\102\035\106\036\114\037\113\040\101\046\115\047\104" +
    "\050\103\051\105\052\112\053\107\054\116\055\077\056" +
    "\100\001\002\000\056\002\uffe4\003\uffe4\010\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\031\uffe4\044\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\073\uffe4\074\uffe4\075\uffe4\001\002\000" +
    "\026\004\063\005\066\006\064\007\076\010\072\026\070" +
    "\033\065\057\073\061\067\062\071\001\002\000\042\027" +
    "\226\032\110\033\102\035\106\036\114\037\113\040\101" +
    "\046\115\047\104\050\103\051\105\052\112\053\107\054" +
    "\116\055\077\056\100\001\002\000\004\030\227\001\002" +
    "\000\052\003\034\010\031\013\015\014\013\015\010\016" +
    "\050\017\005\020\024\021\006\022\053\023\027\044\021" +
    "\063\036\064\017\065\043\066\054\067\012\073\037\074" +
    "\035\075\032\001\002\000\054\003\034\010\031\013\015" +
    "\014\013\015\010\016\050\017\005\020\024\021\006\022" +
    "\053\023\027\031\231\044\021\063\036\064\017\065\043" +
    "\066\054\067\012\073\037\074\035\075\032\001\002\000" +
    "\062\002\uffc9\003\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\232\025\233\031\uffc9\044\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000" +
    "\004\030\242\001\002\000\004\026\234\001\002\000\026" +
    "\004\063\005\066\006\064\007\076\010\072\026\070\033" +
    "\065\057\073\061\067\062\071\001\002\000\042\027\236" +
    "\032\110\033\102\035\106\036\114\037\113\040\101\046" +
    "\115\047\104\050\103\051\105\052\112\053\107\054\116" +
    "\055\077\056\100\001\002\000\004\030\237\001\002\000" +
    "\052\003\034\010\031\013\015\014\013\015\010\016\050" +
    "\017\005\020\024\021\006\022\053\023\027\044\021\063" +
    "\036\064\017\065\043\066\054\067\012\073\037\074\035" +
    "\075\032\001\002\000\054\003\034\010\031\013\015\014" +
    "\013\015\010\016\050\017\005\020\024\021\006\022\053" +
    "\023\027\031\241\044\021\063\036\064\017\065\043\066" +
    "\054\067\012\073\037\074\035\075\032\001\002\000\056" +
    "\002\uffc7\003\uffc7\010\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\031\uffc7" +
    "\044\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\073" +
    "\uffc7\074\uffc7\075\uffc7\001\002\000\052\003\034\010\031" +
    "\013\015\014\013\015\010\016\050\017\005\020\024\021" +
    "\006\022\053\023\027\044\021\063\036\064\017\065\043" +
    "\066\054\067\012\073\037\074\035\075\032\001\002\000" +
    "\054\003\034\010\031\013\015\014\013\015\010\016\050" +
    "\017\005\020\024\021\006\022\053\023\027\031\244\044" +
    "\021\063\036\064\017\065\043\066\054\067\012\073\037" +
    "\074\035\075\032\001\002\000\056\002\uffc8\003\uffc8\010" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\031\uffc8\044\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\001\002\000\004\012\246\001\002\000\016\014\013\015" +
    "\010\016\050\017\005\020\024\073\037\001\002\000\010" +
    "\011\251\045\252\070\250\001\002\000\004\071\255\001" +
    "\002\000\056\002\uffe3\003\uffe3\010\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\031\uffe3\044\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\073\uffe3\074\uffe3\075\uffe3\001\002\000\026\004" +
    "\063\005\066\006\064\007\076\010\072\026\070\033\065" +
    "\057\073\061\067\062\071\001\002\000\042\011\254\032" +
    "\110\033\102\035\106\036\114\037\113\040\101\046\115" +
    "\047\104\050\103\051\105\052\112\053\107\054\116\055" +
    "\077\056\100\001\002\000\056\002\uffe2\003\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\031\uffe2\044\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\073\uffe2\074\uffe2\075\uffe2\001" +
    "\002\000\006\045\257\070\256\001\002\000\004\071\267" +
    "\001\002\000\004\070\260\001\002\000\026\004\063\005" +
    "\066\006\064\007\076\010\072\026\070\033\065\057\073" +
    "\061\067\062\071\001\002\000\006\071\264\072\263\001" +
    "\002\000\044\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\046\115\047\104\050\103\051\105\052\112\053" +
    "\107\054\116\055\077\056\100\071\uffe8\072\uffe8\001\002" +
    "\000\026\004\063\005\066\006\064\007\076\010\072\026" +
    "\070\033\065\057\073\061\067\062\071\001\002\000\004" +
    "\011\265\001\002\000\056\002\uffeb\003\uffeb\010\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\031\uffeb\044\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\073\uffeb\074\uffeb\075\uffeb\001\002" +
    "\000\044\032\110\033\102\035\106\036\114\037\113\040" +
    "\101\046\115\047\104\050\103\051\105\052\112\053\107" +
    "\054\116\055\077\056\100\071\uffe9\072\uffe9\001\002\000" +
    "\004\045\270\001\002\000\004\070\271\001\002\000\004" +
    "\070\272\001\002\000\026\004\063\005\066\006\064\007" +
    "\076\010\072\026\070\033\065\057\073\061\067\062\071" +
    "\001\002\000\006\071\275\072\274\001\002\000\004\070" +
    "\277\001\002\000\004\011\276\001\002\000\056\002\uffea" +
    "\003\uffea\010\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\031\uffea\044\uffea" +
    "\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\073\uffea\074" +
    "\uffea\075\uffea\001\002\000\026\004\063\005\066\006\064" +
    "\007\076\010\072\026\070\033\065\057\073\061\067\062" +
    "\071\001\002\000\006\071\301\072\263\001\002\000\006" +
    "\071\uffe7\072\uffe7\001\002\000\006\071\303\072\263\001" +
    "\002\000\006\071\uffe6\072\uffe6\001\002\000\042\030\305" +
    "\032\110\033\102\035\106\036\114\037\113\040\101\046" +
    "\115\047\104\050\103\051\105\052\112\053\107\054\116" +
    "\055\077\056\100\001\002\000\026\004\063\005\066\006" +
    "\064\007\076\010\072\026\070\033\065\057\073\061\067" +
    "\062\071\001\002\000\034\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\026\uffc3\031\uffc3\033\uffc3\043\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\001\002\000\044\032\110\033" +
    "\102\035\106\036\114\037\113\040\101\043\327\046\115" +
    "\047\104\050\103\051\105\052\112\053\107\054\116\055" +
    "\077\056\100\060\326\001\002\000\034\004\063\005\066" +
    "\006\064\007\076\010\072\026\070\031\312\033\065\043" +
    "\313\057\073\060\311\061\067\062\071\001\002\000\004" +
    "\043\321\001\002\000\056\002\uffc6\003\uffc6\010\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\031\uffc6\044\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002" +
    "\000\004\030\315\001\002\000\034\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\026\uffc2\031\uffc2\033\uffc2\043\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\052\003" +
    "\034\010\031\013\015\014\013\015\010\016\050\017\005" +
    "\020\024\021\006\022\053\023\027\044\021\063\036\064" +
    "\017\065\043\066\054\067\012\073\037\074\035\075\032" +
    "\001\002\000\054\003\034\010\031\013\015\014\013\015" +
    "\010\016\050\017\005\020\024\021\006\022\053\023\027" +
    "\031\317\044\021\063\036\064\017\065\043\066\054\067" +
    "\012\073\037\074\035\075\032\001\002\000\004\031\320" +
    "\001\002\000\056\002\uffc5\003\uffc5\010\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\031\uffc5\044\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002\000\004" +
    "\030\322\001\002\000\052\003\034\010\031\013\015\014" +
    "\013\015\010\016\050\017\005\020\024\021\006\022\053" +
    "\023\027\044\021\063\036\064\017\065\043\066\054\067" +
    "\012\073\037\074\035\075\032\001\002\000\054\003\034" +
    "\010\031\013\015\014\013\015\010\016\050\017\005\020" +
    "\024\021\006\022\053\023\027\031\324\044\021\063\036" +
    "\064\017\065\043\066\054\067\012\073\037\074\035\075" +
    "\032\001\002\000\004\031\325\001\002\000\056\002\uffc4" +
    "\003\uffc4\010\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\031\uffc4\044\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\001\002\000\004\043\333\001\002\000\004" +
    "\030\330\001\002\000\052\003\034\010\031\013\015\014" +
    "\013\015\010\016\050\017\005\020\024\021\006\022\053" +
    "\023\027\044\021\063\036\064\017\065\043\066\054\067" +
    "\012\073\037\074\035\075\032\001\002\000\054\003\034" +
    "\010\031\013\015\014\013\015\010\016\050\017\005\020" +
    "\024\021\006\022\053\023\027\031\332\044\021\063\036" +
    "\064\017\065\043\066\054\067\012\073\037\074\035\075" +
    "\032\001\002\000\034\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\026\uffc1\031\uffc1\033\uffc1\043\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\001\002\000\004\030\334\001\002" +
    "\000\052\003\034\010\031\013\015\014\013\015\010\016" +
    "\050\017\005\020\024\021\006\022\053\023\027\044\021" +
    "\063\036\064\017\065\043\066\054\067\012\073\037\074" +
    "\035\075\032\001\002\000\054\003\034\010\031\013\015" +
    "\014\013\015\010\016\050\017\005\020\024\021\006\022" +
    "\053\023\027\031\336\044\021\063\036\064\017\065\043" +
    "\066\054\067\012\073\037\074\035\075\032\001\002\000" +
    "\034\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\026\uffc0" +
    "\031\uffc0\033\uffc0\043\uffc0\057\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\001\002\000\004\010\340\001\002\000\004\045\356" +
    "\001\002\000\026\004\063\005\066\006\064\007\076\010" +
    "\072\026\070\033\065\057\073\061\067\062\071\001\002" +
    "\000\042\011\343\032\110\033\102\035\106\036\114\037" +
    "\113\040\101\046\115\047\104\050\103\051\105\052\112" +
    "\053\107\054\116\055\077\056\100\001\002\000\004\010" +
    "\344\001\002\000\010\041\354\042\352\045\353\001\002" +
    "\000\004\027\346\001\002\000\004\030\347\001\002\000" +
    "\052\003\034\010\031\013\015\014\013\015\010\016\050" +
    "\017\005\020\024\021\006\022\053\023\027\044\021\063" +
    "\036\064\017\065\043\066\054\067\012\073\037\074\035" +
    "\075\032\001\002\000\054\003\034\010\031\013\015\014" +
    "\013\015\010\016\050\017\005\020\024\021\006\022\053" +
    "\023\027\031\351\044\021\063\036\064\017\065\043\066" +
    "\054\067\012\073\037\074\035\075\032\001\002\000\056" +
    "\002\uffbf\003\uffbf\010\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\031\uffbf" +
    "\044\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\001\002\000\004\027\uffbc\001\002" +
    "\000\026\004\063\005\066\006\064\007\076\010\072\026" +
    "\070\033\065\057\073\061\067\062\071\001\002\000\004" +
    "\027\uffbd\001\002\000\042\027\uffbe\032\110\033\102\035" +
    "\106\036\114\037\113\040\101\046\115\047\104\050\103" +
    "\051\105\052\112\053\107\054\116\055\077\056\100\001" +
    "\002\000\026\004\063\005\066\006\064\007\076\010\072" +
    "\026\070\033\065\057\073\061\067\062\071\001\002\000" +
    "\042\011\207\032\110\033\102\035\106\036\114\037\113" +
    "\040\101\046\115\047\104\050\103\051\105\052\112\053" +
    "\107\054\116\055\077\056\100\001\002\000\026\004\063" +
    "\005\066\006\064\007\076\010\072\026\070\033\065\057" +
    "\073\061\067\062\071\001\002\000\042\027\362\032\110" +
    "\033\102\035\106\036\114\037\113\040\101\046\115\047" +
    "\104\050\103\051\105\052\112\053\107\054\116\055\077" +
    "\056\100\001\002\000\004\011\363\001\002\000\056\002" +
    "\uffec\003\uffec\010\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\031\uffec\044" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\073\uffec" +
    "\074\uffec\075\uffec\001\002\000\056\002\uffba\003\uffba\010" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\031\uffba\044\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\073\uffba\074\uffba\075\uffba" +
    "\001\002\000\004\026\366\001\002\000\020\014\013\015" +
    "\010\016\050\017\005\020\024\027\370\073\037\001\002" +
    "\000\006\027\377\072\376\001\002\000\004\030\373\001" +
    "\002\000\004\010\372\001\002\000\006\027\uffd2\072\uffd2" +
    "\001\002\000\052\003\034\010\031\013\015\014\013\015" +
    "\010\016\050\017\005\020\024\021\006\022\053\023\027" +
    "\044\021\063\036\064\017\065\043\066\054\067\012\073" +
    "\037\074\035\075\032\001\002\000\054\003\034\010\031" +
    "\013\015\014\013\015\010\016\050\017\005\020\024\021" +
    "\006\022\053\023\027\031\375\044\021\063\036\064\017" +
    "\065\043\066\054\067\012\073\037\074\035\075\032\001" +
    "\002\000\056\002\uffd4\003\uffd4\010\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\031\uffd4\044\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\073\uffd4\074\uffd4\075\uffd4\001\002\000\016\014" +
    "\013\015\010\016\050\017\005\020\024\073\037\001\002" +
    "\000\004\030\u0100\001\002\000\052\003\034\010\031\013" +
    "\015\014\013\015\010\016\050\017\005\020\024\021\006" +
    "\022\053\023\027\044\021\063\036\064\017\065\043\066" +
    "\054\067\012\073\037\074\035\075\032\001\002\000\054" +
    "\003\034\010\031\013\015\014\013\015\010\016\050\017" +
    "\005\020\024\021\006\022\053\023\027\031\u0102\044\021" +
    "\063\036\064\017\065\043\066\054\067\012\073\037\074" +
    "\035\075\032\001\002\000\056\002\uffd5\003\uffd5\010\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\031\uffd5\044\uffd5\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\073\uffd5\074\uffd5\075\uffd5\001" +
    "\002\000\004\010\u0104\001\002\000\006\027\uffd3\072\uffd3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\054\002\050\003\017\004\013\006\043\007" +
    "\040\010\037\011\025\012\003\013\046\014\044\017\041" +
    "\021\022\022\051\023\006\024\015\025\024\027\045\033" +
    "\010\035\032\037\027\041\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\004\057\006\043\007\040" +
    "\010\037\011\025\012\003\013\046\014\044\017\041\021" +
    "\022\022\051\023\006\024\015\025\024\027\045\033\010" +
    "\035\032\037\027\041\021\001\001\000\006\005\303\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\176" +
    "\026\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\055\004\013\006\043\007\040\010\037\011\025\012" +
    "\003\013\046\014\044\017\041\021\022\022\051\023\006" +
    "\024\015\025\024\027\045\033\010\035\032\037\027\041" +
    "\021\001\001\000\050\004\057\006\043\007\040\010\037" +
    "\011\025\012\003\013\046\014\044\017\041\021\022\022" +
    "\051\023\006\024\015\025\024\027\045\033\010\035\032" +
    "\037\027\041\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\074\026\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\152\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\146\012\145\026\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\136\026\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\135\026\073\001\001\000\006\005\134\026\073\001\001" +
    "\000\006\005\133\026\073\001\001\000\006\005\132\026" +
    "\073\001\001\000\006\005\131\026\073\001\001\000\006" +
    "\005\130\026\073\001\001\000\006\005\127\026\073\001" +
    "\001\000\006\005\126\026\073\001\001\000\006\005\125" +
    "\026\073\001\001\000\006\005\124\026\073\001\001\000" +
    "\002\001\001\000\006\005\122\026\073\001\001\000\006" +
    "\005\121\026\073\001\001\000\006\005\120\026\073\001" +
    "\001\000\006\005\117\026\073\001\001\000\006\005\116" +
    "\026\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\140\026\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\143\026\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\151\026\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\155\026\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\160" +
    "\004\013\006\043\007\040\010\037\011\025\012\003\013" +
    "\046\014\044\017\041\021\022\022\051\023\006\024\015" +
    "\025\024\027\045\033\010\035\032\037\027\041\021\001" +
    "\001\000\050\004\057\006\043\007\040\010\037\011\025" +
    "\012\003\013\046\014\044\017\041\021\022\022\051\023" +
    "\006\024\015\025\024\027\045\033\010\035\032\037\027" +
    "\041\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\167\026\073\036\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\173\026\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\210" +
    "\026\073\001\001\000\002\001\001\000\006\005\205\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\216\026\073\001\001" +
    "\000\006\005\214\026\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\221\026\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\224\026\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\227\004\013\006\043\007" +
    "\040\010\037\011\025\012\003\013\046\014\044\017\041" +
    "\021\022\022\051\023\006\024\015\025\024\027\045\033" +
    "\010\035\032\037\027\041\021\001\001\000\050\004\057" +
    "\006\043\007\040\010\037\011\025\012\003\013\046\014" +
    "\044\017\041\021\022\022\051\023\006\024\015\025\024" +
    "\027\045\033\010\035\032\037\027\041\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\234\026\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\237\004\013\006\043\007\040\010\037" +
    "\011\025\012\003\013\046\014\044\017\041\021\022\022" +
    "\051\023\006\024\015\025\024\027\045\033\010\035\032" +
    "\037\027\041\021\001\001\000\050\004\057\006\043\007" +
    "\040\010\037\011\025\012\003\013\046\014\044\017\041" +
    "\021\022\022\051\023\006\024\015\025\024\027\045\033" +
    "\010\035\032\037\027\041\021\001\001\000\002\001\001" +
    "\000\052\003\242\004\013\006\043\007\040\010\037\011" +
    "\025\012\003\013\046\014\044\017\041\021\022\022\051" +
    "\023\006\024\015\025\024\027\045\033\010\035\032\037" +
    "\027\041\021\001\001\000\050\004\057\006\043\007\040" +
    "\010\037\011\025\012\003\013\046\014\044\017\041\021" +
    "\022\022\051\023\006\024\015\025\024\027\045\033\010" +
    "\035\032\037\027\041\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\252\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\261\026\073\031\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\265\026\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\272\001\001\000\010\005" +
    "\261\026\073\031\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\261\026\073\031\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\306\015\307\016\305\026\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\306\016" +
    "\313\026\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\315\004" +
    "\013\006\043\007\040\010\037\011\025\012\003\013\046" +
    "\014\044\017\041\021\022\022\051\023\006\024\015\025" +
    "\024\027\045\033\010\035\032\037\027\041\021\001\001" +
    "\000\050\004\057\006\043\007\040\010\037\011\025\012" +
    "\003\013\046\014\044\017\041\021\022\022\051\023\006" +
    "\024\015\025\024\027\045\033\010\035\032\037\027\041" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\322\004\013\006\043\007\040\010" +
    "\037\011\025\012\003\013\046\014\044\017\041\021\022" +
    "\022\051\023\006\024\015\025\024\027\045\033\010\035" +
    "\032\037\027\041\021\001\001\000\050\004\057\006\043" +
    "\007\040\010\037\011\025\012\003\013\046\014\044\017" +
    "\041\021\022\022\051\023\006\024\015\025\024\027\045" +
    "\033\010\035\032\037\027\041\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\330\004\013\006\043\007\040\010\037\011" +
    "\025\012\003\013\046\014\044\017\041\021\022\022\051" +
    "\023\006\024\015\025\024\027\045\033\010\035\032\037" +
    "\027\041\021\001\001\000\050\004\057\006\043\007\040" +
    "\010\037\011\025\012\003\013\046\014\044\017\041\021" +
    "\022\022\051\023\006\024\015\025\024\027\045\033\010" +
    "\035\032\037\027\041\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\334\004\013\006\043\007\040" +
    "\010\037\011\025\012\003\013\046\014\044\017\041\021" +
    "\022\022\051\023\006\024\015\025\024\027\045\033\010" +
    "\035\032\037\027\041\021\001\001\000\050\004\057\006" +
    "\043\007\040\010\037\011\025\012\003\013\046\014\044" +
    "\017\041\021\022\022\051\023\006\024\015\025\024\027" +
    "\045\033\010\035\032\037\027\041\021\001\001\000\002" +
    "\001\001\000\004\010\340\001\001\000\002\001\001\000" +
    "\006\005\341\026\073\001\001\000\002\001\001\000\004" +
    "\020\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\347\004\013\006\043\007\040" +
    "\010\037\011\025\012\003\013\046\014\044\017\041\021" +
    "\022\022\051\023\006\024\015\025\024\027\045\033\010" +
    "\035\032\037\027\041\021\001\001\000\050\004\057\006" +
    "\043\007\040\010\037\011\025\012\003\013\046\014\044" +
    "\017\041\021\022\022\051\023\006\024\015\025\024\027" +
    "\045\033\010\035\032\037\027\041\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\354\026\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\356" +
    "\026\073\001\001\000\002\001\001\000\006\005\360\026" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\370\034\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\373\004" +
    "\013\006\043\007\040\010\037\011\025\012\003\013\046" +
    "\014\044\017\041\021\022\022\051\023\006\024\015\025" +
    "\024\027\045\033\010\035\032\037\027\041\021\001\001" +
    "\000\050\004\057\006\043\007\040\010\037\011\025\012" +
    "\003\013\046\014\044\017\041\021\022\022\051\023\006" +
    "\024\015\025\024\027\045\033\010\035\032\037\027\041" +
    "\021\001\001\000\002\001\001\000\004\012\u0102\001\001" +
    "\000\002\001\001\000\052\003\u0100\004\013\006\043\007" +
    "\040\010\037\011\025\012\003\013\046\014\044\017\041" +
    "\021\022\022\051\023\006\024\015\025\024\027\045\033" +
    "\010\035\032\037\027\041\021\001\001\000\050\004\057" +
    "\006\043\007\040\010\037\011\025\012\003\013\046\014" +
    "\044\017\041\021\022\022\051\023\006\024\015\025\024" +
    "\027\045\033\010\035\032\037\027\041\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public static ArrayList<tabla> listaTabla  = new ArrayList<>();

    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INCREMENTOYDECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= MATCH_SENTENCIA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DECLARACIONVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= STARTWITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= RETORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= ASIGNACIONVEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPRESION ::= PRINTLN PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONVEC ::= MUTABILIDAD ID DOSP TIPOS BRIZQ BRDER IGUAL BRIZQ LISTAVALORES BRDER FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector(m, b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVEC",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONVEC ::= MUTABILIDAD ID DOSP TIPOS BRIZQ BRDER BRIZQ BRDER IGUAL BRIZQ LISTAVALORES2D BRDER FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Object>> c = (LinkedList<LinkedList<Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracionVector2D(m, b, c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVEC",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAVALORES ::= LISTAVALORES COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAVALORES ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Object> lista = new LinkedList<>(); lista.add(a); RESULT = lista; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAVALORES2D ::= LISTAVALORES2D COMA BRIZQ LISTAVALORES BRDER 
            {
              LinkedList<LinkedList<Object>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Object>> a = (LinkedList<LinkedList<Object>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAVALORES2D ::= BRIZQ LISTAVALORES BRDER 
            {
              LinkedList<LinkedList<Object>> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<LinkedList<Object>> lista2D = new LinkedList<>(); lista2D.add(b); RESULT = lista2D; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2D",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACIONVEC ::= ID BRIZQ EXPRESION BRDER IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACIONVEC ::= ID BRIZQ EXPRESION BRDER BRIZQ EXPRESION BRDER IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVector2D(a, b, d, e, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= MUTABILIDAD ID DOSP TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(m, b, null, a, aleft, aright); 
                listaTabla.add(new tabla(b, "Variable", a.getTipo().toString(), "Declaracion", "null", aleft, aright));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= MUTABILIDAD ID DOSP TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(m, b, c, a, aleft, aright); 
                            Object valor = (c instanceof Nativo) ? ((Nativo) c).getValor() : c;
                            listaTabla.add(new tabla(b, "Variable", a.getTipo().toString(), "Declaracion", valor, aleft, aright));
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
                                                    Object valor = (b instanceof Nativo) ? ((Nativo) b).getValor() : b;
                                                    listaTabla.add(new tabla(a, "Variable", null, "Asignacion", valor, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		 RESULT = "CONST"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		 RESULT = "VAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Funcion(b, p, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Funcion(b, new LinkedList<HashMap>(), c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETORNO ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                              RESULT = new Return(a, a.getTipo(), aleft, aright); 
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODO ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STARTWITH ::= START ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTWITH",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STARTWITH ::= START ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STARTWITH",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASTEO ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteo(a, b, aleft, aright); 
                                            Object valor = (b instanceof Nativo) ? ((Nativo) b).getValor() : b;
                                            listaTabla.add(new tabla("Casteo",a.getTipo().toString(), a.getTipo().toString()  , "Casteo", valor, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INCREMENTOYDECREMENTO ::= ID INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
                                                            
                                                            listaTabla.add(new tabla(a,"Variable", "++"  , "INCREMENTO", null, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INCREMENTOYDECREMENTO ::= ID DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
                                                        listaTabla.add(new tabla(a,"Variable", "--"  , "DECREMENTO", null, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INCREMENTOYDECREMENTO ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
                                                    Object valor = (b instanceof Nativo) ? ((Nativo) b).getValor() : b;
                                                    listaTabla.add(new tabla(a, "Variable", b.getTipo().toString(), "Asignacion", valor, aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTOYDECREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new If(a,b,aleft,aright);  listaTabla.add(new tabla("IF", "Sentencias de control", "IF", "bloque", null, aleft, aright));
                                                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); listaTabla.add(new tabla("IF-ELSE", "Sentencias de control", "IF-ELSE", "bloque", null, aleft, aright));
                                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSEIF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseIf(a, b, c, d, aleft, aright); listaTabla.add(new tabla("IF-ELSE-IF", "Sentencias de control", "IF-ELSE-IF", "bloque", null, aleft, aright));
                                                                                                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, null, aleft, aright); 
                    
                    listaTabla.add(new tabla("MATCH", "Sentencias de control", "MATCH", "bloque", "Expresiones", aleft, aright));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST FLECHA LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
                    
                   listaTabla.add(new tabla("MATCH", "Sentencias de control", "MATCH", "bloque", "Expresiones", aleft, aright));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MATCH_SENTENCIA ::= MATCH EXPRESION LLAVE1 CASES_LIST GUIONBAJO FLECHA LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
                   
                    listaTabla.add(new tabla("MATCH", "Sentencias de control", "MATCH", "bloque", "Expresiones", aleft, aright));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATCH_SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASES_LIST ::= CASE 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASES_LIST ::= CASES_LIST CASE 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASE ::= EXPRESION FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASE ::= EXPRESION GUIONBAJO FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);  
    listaTabla.add(new tabla("FOR", "Sentencias Ciclica", "FOR", "bloque", "Expresiones", aleft, aright));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACTUALIZA_FOR ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACTUALIZA_FOR ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
    listaTabla.add(new tabla("WHILE", "Sentencias Ciclica", "WHILE", "bloque", "Expresiones", aleft, aright));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright);
    listaTabla.add(new tabla("WHILE", "Sentencias Ciclica", "DOWHILE", "bloque", "Expresiones", aleft, aright));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "SUMA", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "MENOS", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "MULTIPLICACION", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "DIVISION", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "MODULO", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "POTENCIA", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION EQUALS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);listaTabla.add(new tabla("EXPRESION", "RELACIONAL", "OPERACION", "EQUALS", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION NOTEQUALS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright); listaTabla.add(new tabla("EXPRESION", "RELACIONAL", "OPERACION", "NOTEQUALS", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); listaTabla.add(new tabla("EXPRESION", "RELACIONAL", "OPERACION", "MAYOR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);listaTabla.add(new tabla("EXPRESION", "RELACIONAL", "OPERACION", "MAYORQUE", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); listaTabla.add(new tabla("EXPRESION", "RELACIONAL", "OPERACION", "MENOR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);listaTabla.add(new tabla("EXPRESION", "RELACIONAL", "OPERACION", "MENORQUE", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); listaTabla.add(new tabla("EXPRESION", "LOGICO", "OPERACION", "OR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "AND", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "XOR", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, null, OperadoresLogicos.NOT, aleft, aright); listaTabla.add(new tabla("EXPRESION", "Aritmetica", "OPERACION", "NOT", RESULT, aleft, aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a.charAt(0), new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= ID BRIZQ EXPRESION BRDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= ID BRIZQ EXPRESION BRDER BRIZQ EXPRESION BRDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector2D(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
