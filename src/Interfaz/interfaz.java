/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import abstracto.Instruccion;
import analisis.GraphvizHelper;
import analisis.parser;
import analisis.scanner;
import excepciones.Errores;
import expresiones.AccesoVector;
import instrucciones.AsignacionStruct;
import instrucciones.AsignacionVar;
import instrucciones.AsignacionVector;
import instrucciones.AsignacionVector2D;
import instrucciones.Declaracion;
import instrucciones.DeclaracionLista;
import instrucciones.DeclaracionStruct;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionVector2D;
import instrucciones.Find;
import instrucciones.Metodo;
import instrucciones.Return;
import instrucciones.StartWith;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import simbolo.Arbol;
import simbolo.tablaSimbolos;
import reportes.reporteErrores;
import instrucciones.Funcion;
import instrucciones.Length;
import instrucciones.ToString;

/**
 *
 * @author VictorS
 */
public class interfaz extends javax.swing.JFrame {

    private int tabCount = 0;
    private ArrayList<JTextArea> textAreas;
    
    

    /**
     * Creates new form interfaz
     */
    public interfaz() {
         textAreas = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PEST = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PEST.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("ARCHIVO");

        jMenuItem1.setText("NUEVO");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("ABRIR");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("GUARDAR");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("ELIMINAR");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("EJECUTAR");

        jMenuItem8.setText("RUN");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PEST))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PEST, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void addNewTab() {
    JTextArea texto = new JTextArea();
    JPanel tabPanel = new JPanel();
    tabPanel.setLayout(new BoxLayout(tabPanel, BoxLayout.Y_AXIS));
    tabPanel.add(new JScrollPane(texto)); 

    PEST.addTab("P" + tabCount, tabPanel);
    textAreas.add(texto);
    tabCount++;
        }
    
    private void addNewTabandSet() {
    JTextArea texto = new JTextArea();
    JPanel tabPanel = new JPanel();
    tabPanel.setLayout(new BoxLayout(tabPanel, BoxLayout.Y_AXIS));
    tabPanel.add(new JScrollPane(texto)); 

    PEST.addTab("P" + tabCount, tabPanel);
    textAreas.add(texto);
    tabCount++;
    
    JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                    texto.setText(""); // Limpiar el JTextArea
                    String line;
                    while ((line = reader.readLine()) != null) {
                        texto.append(line + "\n");
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
            }
        }
    
    private void getAllTexts() {
        for (int i = 0; i < textAreas.size(); i++) {
            JTextArea textArea = textAreas.get(i);
            String text = textArea.getText();
            System.out.println("Text in P" + i + ": " + text);
        }
    }
    
    private String getTextOfSelectedTab() {
    int selectedIndex = PEST.getSelectedIndex();
    if (selectedIndex >= 0 && selectedIndex < textAreas.size()) {
        JTextArea selectedTextArea = textAreas.get(selectedIndex);
        return selectedTextArea.getText();
    }
    return ""; // Retorna una cadena vacía si no se encuentra ningún texto
}
    
    
    private void saveCurrentTab() {
        int selectedIndex = PEST.getSelectedIndex();
        if (selectedIndex >= 0 && selectedIndex < textAreas.size()) {
            JTextArea selectedTextArea = textAreas.get(selectedIndex);
            String content = selectedTextArea.getText();

            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                    writer.write(content);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay pestaña seleccionada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void removeCurrentTab() {
        int selectedIndex = PEST.getSelectedIndex();
        if (selectedIndex >= 0 && selectedIndex < textAreas.size()) {
            PEST.removeTabAt(selectedIndex);
            textAreas.remove(selectedIndex);
            tabCount--;
        } else {
            JOptionPane.showMessageDialog(this, "No hay pestaña seleccionada", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
       addNewTab();
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        addNewTabandSet();
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        String selectedTabText = getTextOfSelectedTab();
System.out.println("Texto del tab seleccionado: " + selectedTabText);


        
try {
    
            String texto = selectedTabText;
            scanner s = new scanner(new BufferedReader(new StringReader(texto)));
            parser p = new parser(s);
            var resultado = p.parse();
            var ast = new Arbol((LinkedList<Instruccion>) resultado.value);
            var tabla = new tablaSimbolos();
            tabla.setNombre("GLOBAL");
            ast.setConsola("");
            ast.setTablaGlobal(tabla);
            LinkedList<Errores> lista = new LinkedList<>();
            lista.addAll (s.listaErrores);
            lista.addAll(p.listaErrores);
            
            for (var a : ast.getInstrucciones()) {
                if (a == null) {
                    continue;
                }
                
                if (a instanceof Metodo || a instanceof Funcion ) {
                     ast.addFunciones(a);
                }  
                // structs
            }
            
            
            for (var a : ast.getInstrucciones()) {
                if (a == null) {
                    continue;
                }

                if (a instanceof Declaracion || a instanceof AsignacionVar || a instanceof ToString || a instanceof Length || a instanceof Find
                         || a instanceof DeclaracionVector || a instanceof DeclaracionVector2D || a instanceof DeclaracionLista || a instanceof DeclaracionStruct
                        ||a instanceof AsignacionVector || a instanceof AsignacionVector2D ||a instanceof AsignacionStruct
                        ){
                    var res = a.interpretar(ast, tabla);
                    if (res instanceof Errores errores) {
                        lista.add(errores);
                    }
                }
                //funciones structs
            }
            
            StartWith e = null;
            for (var a : ast.getInstrucciones()) {
                if (a == null) {
                    continue;
                }
                if (a instanceof StartWith startwith) {
                    e = startwith;
                    break;
                }
            }
            
            
            
            
           var restultadoStart = e.interpretar(ast, tabla);
            if(restultadoStart instanceof Errores){
                System.out.println("Ya no sale compi1");
            }
            
            
            //generar AST
            String cadena = "digraph ast{\n";
            cadena += "nINICIO[label=\"INICIO\"];\n";
            cadena += "nINSTRUCCIONES[label=\"INSTRUCCIONES\"];\n";
            cadena += "nINICIO -> nINSTRUCCIONES;\n";

            for (var i : ast.getInstrucciones()) {
                if (i == null) {
                    continue;
                }
                String nodoAux = "n" + ast.getContador();
                cadena += nodoAux + "[label=\"INSTRUCCION\"];\n";
                cadena += "nINSTRUCCIONES -> " + nodoAux + ";\n";
                cadena += i.generarast(ast, nodoAux);
            }

            cadena += "\n}";
            System.out.println(cadena);
            
            // Escribir la cadena en un archivo .dot
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("ast.dot"))) {
                writer.write(cadena);
            } catch (IOException ex) {
                System.out.println("Error al escribir el archivo .dot");
                ex.printStackTrace();
            }
            
            try {
               GraphvizHelper.generatePngFromDot("ast.dot", "ast.png");
                System.out.println("Imagen PNG generada correctamente");
            } catch (IOException | InterruptedException ex) {
                System.out.println("Error al generar la imagen PNG");
                ex.printStackTrace();
            
            }
            
             System.out.println("validar alamacenamiento de func y var globales");
            jTextArea2.setText(ast.getConsola());
            for (var i : lista) {
                System.out.println(i);
            }
            
                 reporteErrores.crearReporte(lista);
                 reporteErrores.crearTabla();
        } catch (Exception ex) {
            System.out.println("Algo salio mal");
            System.out.println(ex);
        }

       


    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        saveCurrentTab();

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
removeCurrentTab();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTabbedPane PEST;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
